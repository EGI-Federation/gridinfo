#!/usr/bin/env python

import ldap
import sys
import getopt
import json
import os

VERSION = '0.71'
conf = {}

# option: [(short_option,long_option),parameter?]
options = {
	'help': [("-h", "--help"),False],
	'version': [("-V", "--version"),False],
	'verbose': [("-v", "--verbose"),False],
	'csv': [("-c","--csv"),False],
	'json': [("-j","--json"),False],
	'munge': [("-m","--munge"),False],
	'host': [(None,"--host"),True],
	'list': [("-l","--list"),True],
	'vo': [(None,"--vo"),True],
	'domain': [("-d","--domain"),True],
	'service-capability': [(None,"--service-capability"),True],
	'type': [("-t","--type"),True],
	'capability': [(None,"--capability"),True],
	'interface': [("-i","--interface"),True],
        'interface-version': [(None,"--interface-version"),True],
	'state': [("-s","--state"),True],
	'quality': [("-q","--quality"),True],
	}
# attribute for the ldap request: [pre_objectClass,objectClass,key,result_as_list]
attributes = {
	'vo':['Access','Policy','Rule',True],
	'domain':['','Service','AdminDomainForeignKey',False],
	'service-capability':['','Service','Capability',True],
	'type':['','Service','Type',False],
	'capability':['','Endpoint','Capability',True],
	'interface':['','Endpoint','InterfaceName',False],
	'interface-version':['','Endpoint','InterfaceVersion',False],
	'state':['','Endpoint','HealthState',False],
	'quality':['','Endpoint','QualityLevel',False],
	}
# Keys that link objects to Endpoint object
objectKey = {'Service':'ID','AccessPolicy':'EndpointForeignKey'}

def main(argv):
	""" Main function that launches the other functions """

	if 'LCG_GFAL_INFOSYS' in os.environ:
		conf['host'] = os.environ['LCG_GFAL_INFOSYS']
	parse_options(argv)
	validate_conf()
	if 'list' in conf:
		list = list_attr()
		print '\n'.join(list)
	else:
		dic = list_services()
		print serialize_output(dic)
	sys.exit()

def parse_options(argv):
	""" Parses the selected options and pouts them in a configuration dictionnary """

        short_options = ''
        long_options = []
        tmp_list = []
        for i in options:
                if options[i][0][0]:
                        short_options += options[i][0][0][1:]
                        if options[i][1]:
                                short_options += ':'
                                long_options.append(options[i][0][1][2:]+'=')
                        else:
                                long_options.append(options[i][0][1][2:])
                else:
                        if options[i][1]:
                                tmp_list.append(options[i][0][1][2:]+'=')
                        else:
                                tmp_list.append(options[i][0][1][2:])
        long_options.extend(tmp_list)
        try:
                opts, args = getopt.getopt(argv, short_options, long_options)
        except getopt.GetoptError:
                sys.exit(usage())
	
	#options
	for opt, arg in opts:
		for i in options:
			if opt in options[i][0]:
				if options[i][1]:
					conf[i] = arg
				else:
					conf[i] = True
				continue
	#arguments
	conf['args'] = list(set(args)) # Delete multiple identical values
	if 'all' in args:
		conf['args'] = attributes.keys()

def validate_conf():
	""" Prints verbose messages and checks for errors """
        
	#options
	if 'help' in conf:
                print usage()
		sys.exit()
        if 'version' in conf:
                print os.path.basename(sys.argv[0]) +' V'+VERSION
		sys.exit()
        if 'verbose' in conf:
                print 'Verbose mode activated.'
        if 'csv' in conf and 'json' in conf and 'munge' in conf:
                sys.exit('Error: choose between csv, json and munge.')
	elif 'csv' in conf and 'json' in conf:
		sys.exit('Error: choose between csv and json.')
	elif 'csv' in conf and 'munge' in conf:
		sys.exit('Error: choose between csv and munge.')
        elif 'munge' in conf and 'json' in conf:
		sys.exit('Error: choose between json and munge.')
        elif 'csv' in conf:
                if 'verbose' in conf:
                        print 'Output in csv formating'
        elif 'json' in conf:
                if 'verbose' in conf:
                        print 'Output in json formating'
        elif 'munge' in conf:
		conf['args'] = ['type','service-capability','domain','capability','interface','interface-version','quality']
		if 'verbose' in conf:
                        print 'Output in munge formating'
	if 'host' in conf:
                if 'verbose' in conf:
                        print 'The following host will be used:',conf['host']
        else:
                sys.exit(usage())
        if 'list' in conf:
		if conf['list'] not in attributes.keys():
			sys.exit('Error: wrong attribute')
                if 'verbose' in conf:
                        print 'Lists all the possible values for the following attribute:',conf['list']
	for i in attributes.keys():
		if i in conf:
			if 'verbose' in conf:
				print 'Filter services by the following '+i+':',conf[i]
	
	#arguments
	if 'args' in conf:
		for arg in conf['args']:
			if arg not in attributes.keys():
        	                sys.exit('Error: wrong attribute')
		if 'verbose' in conf:
			if len(conf['args']) > 0:
				print 'The following attributes will be displayed:',' '.join(conf['args'])
			else:
				print 'Only the url will be displayed.'
	if 'verbose' in conf:
		print

def usage():
	""" Returns the usage message """
	
	return '''Usage: service-info [options] [attributes]

    List urls of services from the host. Additionnal displayed attributes must belong to this list: vo, domain, service-capability, type, capability, interface, interface-version, state, quality    or   all.

    --host			host:port	Specify a host endpoint (<hostname>:<port>). By default the environmental variable LCG_GFAL_INFOSYS will be used.
    -l, --list                  attribute       List all the possible values of the specified attribute
    --vo			vo		Filter services by the specified vo
    -d, --domain                domain          Filter services by the specified domain
    --service-capability	capability      Filter services by the specified service capability
    -t, --type                  type            Filter services by the specified type
    --capability		capability      Filter services by the specified capability
    -i, --interface		interface	Filter services by the specified interface
    --interface-version         version		Filter services by the specified interface version
    -s, --state			state		Filter services by the specified state
    -q, --quality		quality		Filter services by the specified quality
    -c, --csv					Provide the output in CSV formating
    -j, --json					Provide the output in JSON formating
    -v, --verbose				Enable verbose mode
    -V, --version				Print the version
    -h, --help                          	Print this helpful message'''

def request(filter=None):
	""" Returns the result of the ldap request with the filter given """	
	try:
		l = ldap.initialize('ldap://'+conf['host'])
		if filter != None:
			result = l.result(l.search('o=glue',ldap.SCOPE_SUBTREE,filter))
		else:
			result = l.result(l.search('o=glue',ldap.SCOPE_SUBTREE))
	except ldap.SERVER_DOWN:
		sys.exit('Error: Can\'t contact the LDAP server. Please check your host.')
	return result[1]

def list_services():
	""" Returns a dictionary of the filtered results from an ldap request """
	filter = {'Endpoint': ''}
	result = {}
	selection_list = {}
	# Filters 
	for i in attributes:
		if i in conf:
			if attributes[i][0]+attributes[i][1] not in filter:
				filter[attributes[i][0]+attributes[i][1]] = ''
			tmp_filter = '(GLUE2'+attributes[i][1]+attributes[i][2]+'='+conf[i]+')'
			if attributes[i][2] == 'Rule':
				tmp_filter = '(|(GLUE2PolicyRule=ALL)'+tmp_filter+')'
			filter[attributes[i][0]+attributes[i][1]] += tmp_filter
	for i in ['Service','AccessPolicy']:
		if i in filter:
			result[i] = request('(&(objectClass=GLUE2'+i+')'+filter[i]+')')
			selection_list[i] = []
			for r in result[i]:
				selection_list[i].append(r[1]['GLUE2'+i+objectKey[i]][0])
	
	result['Endpoint'] = request('(&(objectClass=GLUE2Endpoint)'+filter['Endpoint']+')')
	dic = {} # Final results
	dic2 = {} # Tmp results
	for res in result['Endpoint']:
		iD = {'Service':res[1]['GLUE2EndpointServiceForeignKey'][0]
			,'AccessPolicy':res[1]['GLUE2EndpointID'][0]}
		# Executes the filtering by Service and AccessPolicy objects
		stop = False
		for i in ['Service','AccessPolicy']:
	                if i in selection_list:
				if iD[i] not in selection_list[i]:
                                	stop = True
					break
		if stop:
			continue
		# Fill in the final results dictionnary
		dic[iD['Service']] = {'url':res[1]['GLUE2EndpointURL'][0]}
		for attr in conf['args']:
			a1 = attributes[attr][0]+attributes[attr][1]
			a2 = attributes[attr][1]+attributes[attr][2]
			dic[iD['Service']][attr] = None
			if attr in conf and not attributes[attr][3]:
				dic[iD['Service']][attr] = conf[attr]
			else:
				if a1 == 'Endpoint':
					if 'GLUE2'+a2 in res[1]:
						dic[iD['Service']][attr] = res[1]['GLUE2'+a2]
						if not attributes[attr][3]:
							dic[iD['Service']][attr] = dic[iD['Service']][attr][0]
				else:
					if a1 not in result:
	                               		result[a1] = request('(objectClass=GLUE2'+a1+')')
					if attr not in dic2:
						dic2[attr] = {}
						for r in result[a1]:
							if 'GLUE2'+a2 in r[1]:
								dic2[attr][r[1]['GLUE2'+a1+objectKey[a1]][0]] = r[1]['GLUE2'+a2]
							else:
								dic2[attr][r[1]['GLUE2'+a1+objectKey[a1]][0]] = None
					if iD[a1] in dic2[attr]:
						dic[iD['Service']][attr] = dic2[attr][iD[a1]]
						if not attributes[attr][3] and dic[iD['Service']][attr]:
							dic[iD['Service']][attr] = dic[iD['Service']][attr][0]
	if len(dic) == 0:
		sys.exit('Error: No result. Verify search parameters.')
	return dic

def list_attr():
	""" Returns a list of values for a given attribute """

	try:
		oClass = attributes[conf['list']][0]+attributes[conf['list']][1]
		key = attributes[conf['list']][1]+attributes[conf['list']][2]
	except KeyError:
		sys.exit('Error: wrong attribute.')
	result = request('objectClass=GLUE2'+oClass)
        list=[]
        for r in result:
		if 'GLUE2'+key in r[1]:
			if r[1]['GLUE2'+key][0] not in list:
				list.append(r[1]['GLUE2'+key][0])
		else:
			if 'None' not in list:
				list.append('None')
	list.sort()
	return list

def serialize_output(dic):
        """ Return the output with the wished format """

	#CSV not finished
	if 'csv' in conf:
		list=[]
		for i in dic:
			list2 = []
			list2.append(dic[i]['url'])
			for j in conf['args']:
				if dic[i][j] == None:
					list2.append('None')
				elif attributes[j][3]:
					list2.append('"'+','.join(dic[i][j])+'"')
				else:
					list2.append(dic[i][j])
                        list.append(','.join(list2))
                output = '\n'.join(list)
        elif 'json' in conf:
                output = json.dumps(dic)
	elif 'munge' in conf:
		list = []
		for i in dic:
			dicTmp = {
				"Service_Type":dic[i]['type'],
				"Service_Capability":dic[i]['service-capability'],
				"Service_Admin_Domain":dic[i]['domain'],
				"Service_Endpoint_URL":dic[i]['url'],
				"Endpoint_Capability":dic[i]['capability'],
				"Endpoint_Interface_Name":dic[i]['interface'],
				"Endpoint_Interface_Version":dic[i]['interface-version'],
				"Endpoint_Quality_Level":dic[i]['quality']
				}
			list.append(json.dumps(dicTmp))
		output = '['+','.join(list)+']'
        else:
		list=[]
		for i in dic:
			list.append('url: '+dic[i]['url'])
			for j in conf['args']:
				if dic[i][j] == None:
					list.append(j+': None')
				elif attributes[j][3]:
					list.append(j+': '+','.join(dic[i][j]))
				else:
					list.append(j+': '+dic[i][j])
			list.append('')
                output = '\n'.join(list)
        return output

if __name__ == "__main__":
    main(sys.argv[1:])
