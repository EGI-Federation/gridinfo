#!/usr/bin/env python

import ldap
import sys
import getopt
import json
import os

VERSION = '0.35'
conf = {}

def main(argv):
	if 'LCG_GFAL_INFOSYS' in os.environ:
		conf['bdii'] = os.environ['LCG_GFAL_INFOSYS']

	try:
		opts, args = getopt.getopt(argv, "b:t:v:l:cjhdV", ["bdii=", "type=","vo=","list=","csv","json","help","debug","version"])
	except getopt.GetoptError:
		sys.exit(usage())
	
	parse_options(opts)
	validate_conf()
	if 'attr' in conf:
		list = list_attr()
		print '\n'.join(list)
		# USE serialize_output() ??????
	else:
		dic = list_services()
		print serialize_output(dic)
	sys.exit()

def parse_options(opts):
        for opt, arg in opts:
                if opt in ("-h", "--help"):
                        conf['help'] = True
                elif opt in ("-V", "--version"):
                        conf['version'] = True
                elif opt in ("-d", "--debug"):
                        conf['debug'] = True
                elif opt in ("-c","--csv"):
                        conf['csv'] = True
                elif opt in ("-j","--json"):
                        conf['json'] = True
                elif opt in ("-b","--bdii"):
                        conf['bdii'] = arg
                elif opt in ("-l","--list"):
                        conf['attr'] = arg
                elif opt in ("-v","--vo"):
                        conf['vo'] = arg
                elif opt in ("-t","--type"):
                        conf['type'] = arg

def validate_conf():
        if 'help' in conf:
                print usage()
		sys.exit()
        if 'version' in conf:
                print os.path.basename(sys.argv[0]) +' V'+VERSION
        if 'debug' in conf:
                print 'Verbose mode activated.'
        if 'csv' in conf and 'json' in conf:
                sys.exit('Error: choose between csv and json.')
        elif 'csv' in conf:
                if 'debug' in conf:
                        print 'Output in csv formating'
        elif 'json' in conf:
                if 'debug' in conf:
                        print 'Output in json formating'
        if 'bdii' in conf:
                if 'debug' in conf:
                        print 'The following bdii will be used:',conf['bdii']
        else:
                sys.exit('Error: Please specify a bddi endpoint (-b option).')
        if 'attr' in conf:
                if 'debug' in conf:
                        print 'Lists all the published values for the following attribute:',conf['attr']
        if 'vo' in conf:
                if 'debug' in conf:
                        print 'Lists all services for the following VO:',conf['vo']
        if 'type' in conf:
                if 'debug' in conf:
                        print 'Lists all services for the following type:',conf['type']
	if 'debug' in conf:
		print

def usage():
	return '''Usage: service-info [options]

    -b, --bdii	host:port	Specify a BDII endpoint (<hostname>:<port>). By default the environmental variable LCG_GFAL_INFOSYS will be used.
    -t, --type	type		Lists all services of a specific type. By default all services are returned.
    -v, --vo	VO		List all services for a specific VO
    -l, --list	attrib		List all the published values for an attribute (ServiceType, VO)
    -c, --csv			Provides the output in CSV formating
    -j, --json			Provides the output in JSON formating
    -h, --help			Prints this helpful message
    -d, --debug			Verbose mode 
    -V, --version		Prints this helpful message'''

def request(filter=None):
	try:
		l = ldap.initialize('ldap://'+conf['bdii'])
		if filter != None:
			result = l.result(l.search('o=glue',ldap.SCOPE_SUBTREE,filter))
		else:
			result = l.result(l.search('o=glue',ldap.SCOPE_SUBTREE))
	except ldap.SERVER_DOWN:
		sys.exit('Error: Can\'t contact the LDAP server. Please check your bdii.')
	return result[1]

def list_services():
	result = request('objectClass=GLUE2Endpoint')
	dic={}
	if 'type' in conf:
		resultType = request('(&(objectClass=GLUE2Service)(GLUE2ServiceType='+conf['type']+'))')
		listServices = []
		for rT in resultType:
			listServices.append(rT[1]['GLUE2ServiceID'][0])
	if 'vo' in conf:
		resultVO = request('(|(GLUE2PolicyRule=ALL)(GLUE2PolicyRule='+conf['vo']+'))')
		listEndpoints = []
		for rV in resultVO:
			listEndpoints.append(rV[1]['GLUE2AccessPolicyEndpointForeignKey'][0])
	for res in result:
		serviceID = res[1]['GLUE2EndpointServiceForeignKey'][0]
		if 'type' in conf:
			if serviceID not in listServices:
				continue
		if 'vo' in conf:
			if res[1]['GLUE2EndpointID'][0] not in listEndpoints:
				continue
		dic[serviceID] = {'GLUE2EndpointURL':res[1]['GLUE2EndpointURL']}
	if len(dic) == 0 and 'type' in conf:
		sys.exit('Error: No result. The type you used is probably wrong.')
	return dic 

def list_attr():
	if conf['attr'] == 'ServiceType':
        	oClass = 'Service'
		key = 'ServiceType'
	elif conf['attr'] == 'vo':
		oClass = 'Policy'
		key = 'PolicyRule'
	else:
		sys.exit('Error: wrong attribute.')

	result = request('objectClass=GLUE2'+oClass)
        list=[]
        for r in result:
		if r[1]['GLUE2'+key][0] not in list:
			list.append(r[1]['GLUE2'+key][0])
	list.sort()
	return list

def serialize_output(dic):
        if 'csv' in conf:
		list=[]
		for i in dic:
                        list.append(str(dic[i]['GLUE2EndpointURL'][0]))
                output = ','.join(list)
        elif 'json' in conf:
                output = json.dumps(dic)
        else:
		list=[]
		for i in dic:
			list.append(str(dic[i]['GLUE2EndpointURL'][0]))
                output = '\n'.join(list)
        return output

if __name__ == "__main__":
    main(sys.argv[1:])
