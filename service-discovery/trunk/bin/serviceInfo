#!/usr/bin/env python

import ldap
import sys
import getopt
import json
import os

VERSION = '0.6'
conf = {}

# option: [(short_option,long_option),parameter?]
options = {
	'help': [("-h", "--help"),False],
	'version': [("-V", "--version"),False],
	'verbose': [("-v", "--verbose"),False],
	'csv': [("-c","--csv"),False],
	'json': [("-j","--json"),False],
	'munge': [("-m","--munge"),False],
	'host': [(None,"--host"),True],
	'list': [("-l","--list"),True],
	'vo': [(None,"--vo"),True],
	'domain': [("-d","--domain"),True],
	'service-capability': [(None,"--service-capability"),True],
	'type': [("-t","--type"),True],
	'capability': [(None,"--capability"),True],
	'interface': [("-i","--interface"),True],
        'interface-version': [(None,"--interface-version"),True],
	'state': [("-s","--state"),True],
	'quality': [("-q","--quality"),True],
	}
# attribute for the ldap request: [objectClass,key]
attributes = {
	'vo':['AccessPolicy','Rule'],
	'domain':['Service','AdminDomainForeignKey'],
	'service-capability':['Service','Capability'],
	'type':['Service','Type'],
	'capability':['Endpoint','Capability'],
	'interface':['Endpoint','InterfaceName'],
	'interface-version':['Endpoint','InterfaceVersion'],
	'state':['Endpoint','HealthState'],
	'quality':['Endpoint','QualityLevel'],
	}

def main(argv):
	""" Main function that launches the other functions """

	if 'LCG_GFAL_INFOSYS' in os.environ:
		conf['host'] = os.environ['LCG_GFAL_INFOSYS']
	parse_options(argv)
	validate_conf()
	if 'list' in conf:
		list = list_attr()
		print '\n'.join(list)
		# USE serialize_output() ????????????????????????
	else:
		dic = list_services()
		print serialize_output(dic)
	sys.exit()

def parse_options(argv):
	""" Parses the selected options and pouts them in a configuration dictionnary """

        short_options = ''
        long_options = []
        tmp_list = []
        for i in options:
                if options[i][0][0]:
                        short_options += options[i][0][0][1:]
                        if options[i][1]:
                                short_options += ':'
                                long_options.append(options[i][0][1][2:]+'=')
                        else:
                                long_options.append(options[i][0][1][2:])
                else:
                        if options[i][1]:
                                tmp_list.append(options[i][0][1][2:]+'=')
                        else:
                                tmp_list.append(options[i][0][1][2:])
        long_options.extend(tmp_list)
        try:
                opts, args = getopt.getopt(argv, short_options, long_options)
        except getopt.GetoptError:
                sys.exit(usage())
	
	#options
	for opt, arg in opts:
		for i in options:
			if opt in options[i][0]:
				if options[i][1]:
					conf[i] = arg
				else:
					conf[i] = True
				continue
	#arguments
	conf['args'] = args
	if 'all' in args:
		conf['args'] = attributes.keys()

def validate_conf():
	""" Prints verbose messages and checks for errors """
        
	#options
	if 'help' in conf:
                print usage()
		sys.exit()
        if 'version' in conf:
                print os.path.basename(sys.argv[0]) +' V'+VERSION
		sys.exit()
        if 'verbose' in conf:
                print 'Verbose mode activated.'
        if 'csv' in conf and 'json' in conf and 'munge' in conf:
                sys.exit('Error: choose between csv, json and munge.')
	elif 'csv' in conf and 'json' in conf:
		sys.exit('Error: choose between csv and json.')
	elif 'csv' in conf and 'munge' in conf:
		sys.exit('Error: choose between csv and munge.')
        elif 'munge' in conf and 'json' in conf:
		sys.exit('Error: choose between json and munge.')
        elif 'csv' in conf:
                if 'verbose' in conf:
                        print 'Output in csv formating'
        elif 'json' in conf:
                if 'verbose' in conf:
                        print 'Output in json formating'
        elif 'munge' in conf:
		conf['args'] = ['type','service-capability','domain','capability','interface','interface-version','quality']
		if 'verbose' in conf:
                        print 'Output in munge formating'
	if 'host' in conf:
                if 'verbose' in conf:
                        print 'The following host will be used:',conf['host']
        else:
                sys.exit(usage())
        if 'list' in conf:
		if conf['list'] not in attributes.keys():
			sys.exit('Error: wrong attribute')
                if 'verbose' in conf:
                        print 'Lists all the possible values for the following attribute:',conf['list']
        if 'vo' in conf:
                if 'verbose' in conf:
                        print 'Filter services by the following VO:',conf['vo']
        if 'domain' in conf:
                if 'verbose' in conf:
                        print 'Filter services by the following domain:',conf['domain']
	if 'service-capability' in conf:
                if 'verbose' in conf:
                        print 'Filter services by the following service capability:',conf['service-capability']
	if 'type' in conf:
                if 'verbose' in conf:
                        print 'Filter services by the following type:',conf['type']
	if 'capability' in conf:
                if 'verbose' in conf:
                        print 'Filter services by the following endpoint capability:',conf['capability']
	if 'interface' in conf:
		if 'verbose' in conf:
			print 'Filter services by the following interface:',conf['interface']
	if 'interface-version' in conf:
                if 'verbose' in conf:
                        print 'Filter services by the following interface version:',conf['interface-version']
        if 'state' in conf:
                if 'verbose' in conf:
                        print 'Filter services by the following state:',conf['state']
	if 'quality' in conf:
		if 'verbose' in conf:
			print 'Filter services by the following quality:',conf['quality']
	
	#arguments
	if 'args' in conf:
		for arg in conf['args']:
			if arg not in attributes.keys():
        	                sys.exit('Error: wrong attribute')
		if 'verbose' in conf:
			print 'The following attributes will be displayed:',' '.join(conf['args'])
	if 'verbose' in conf:
		print

def usage():
	""" Returns the usage message """
	
	return '''Usage: service-info [options] [attributes]

    List urls of services from the host. Additionnal displayed attributes must belong to this list: vo, domain, service-capability, type, capability, interface, interface-version, state, quality    or   all.

    --host			host:port	Specify a host endpoint (<hostname>:<port>). By default the environmental variable LCG_GFAL_INFOSYS will be used.
    -l, --list                  attribute       List all the possible values of the specified attribute
    --vo			vo		Filter services by the specified vo
    -d, --domain                domain          Filter services by the specified domain
    --service-capability	capability      Filter services by the specified service capability
    -t, --type                  type            Filter services by the specified type
    --capability		capability      Filter services by the specified capability
    -i, --interface		interface	Filter services by the specified interface
    --interface-version         version		Filter services by the specified interface version
    -s, --state			state		Filter services by the specified state
    -q, --quality		quality		Filter services by the specified quality
    -c, --csv					Provide the output in CSV formating
    -j, --json					Provide the output in JSON formating
    -v, --verbose				Enable verbose mode
    -V, --version				Print the version
    -h, --help                          	Print this helpful message'''

def request(filter=None):
	""" Returns the result of the ldap request with the filter given """	

	try:
		l = ldap.initialize('ldap://'+conf['host'])
		if filter != None:
			result = l.result(l.search('o=glue',ldap.SCOPE_SUBTREE,filter))
		else:
			result = l.result(l.search('o=glue',ldap.SCOPE_SUBTREE))
	except ldap.SERVER_DOWN:
		sys.exit('Error: Can\'t contact the LDAP server. Please check your host.')
	return result[1]

def list_services():
	""" Returns a dictionary of the filtered results from an ldap request """

	if 'vo' in conf:
		listVO = []
		resultVO = request('(&(objectClass=GLUE2Policy)(|(GLUE2PolicyRule=ALL)(GLUE2PolicyRule='+conf['vo']+')))')
		for rV in resultVO:
			listVO.append(rV[1]['GLUE2AccessPolicyEndpointForeignKey'][0])
	filterServices = None
	if 'domain' in conf:
		if not filterServices:
			filterServices = '(&(objectClass=GLUE2Service)'
		filterServices += '(GLUE2ServiceAdminDomainForeignKey='+conf['domain']+')'
	if 'service-capability' in conf:
		if not filterServices:
                        filterServices = '(&(objectClass=GLUE2Service)'
		filterServices += '(GLUE2ServiceCapability='+conf['service-capability']+')'
	if 'type' in conf:
        	if not filterServices:
                        filterServices = '(&(objectClass=GLUE2Service)'
	        filterServices += '(GLUE2ServiceType='+conf['type']+')'
	if filterServices:
		listServices = []
		resultServices = request(filterServices+')')
		for rS in resultServices:
			listServices.append(rS[1]['GLUE2ServiceID'][0])
	filter = '(&(objectClass=GLUE2Endpoint)'
        if 'capability' in conf:
                filter += '(GLUE2EndpointCapability='+conf['capability']+')'
        if 'interface' in conf:
                filter += '(GLUE2EndpointInterfaceName='+conf['interface']+')'
        if 'interface-version' in conf:
                filter += '(GLUE2EndpointInterfaceVersion='+conf['interface-version']+')'
        if 'state' in conf:
                filter += '(GLUE2EndpointHealthState='+conf['state']+')'
        if 'quality' in conf:
                filter += '(GLUE2EndpointQualityLevel='+conf['quality']+')'
        result = request(filter +')')
	dic = {}
	for res in result:
		serviceID = res[1]['GLUE2EndpointServiceForeignKey'][0]
		endpointID = res[1]['GLUE2EndpointID'][0]
		if 'vo' in conf and endpointID not in listVO:
				continue
                if filterServices and serviceID not in listServices:
                                continue
		
		dic[serviceID] = {'url':res[1]['GLUE2EndpointURL']}
		if 'vo' in conf['args']:
                        if 'vo' in conf:
                                dic[serviceID]['vo'] = [conf['vo']]
                        else:
                                if 'resultVO' not in locals():
                                        resultVO = request('(objectClass=GLUE2AccessPolicy)')
                                        dicVO = {}
                                        for rV in resultVO:
                                                if rV[1]['GLUE2AccessPolicyEndpointForeignKey'][0] not in dicVO:
                                                        dicVO[rV[1]['GLUE2AccessPolicyEndpointForeignKey'][0]] = rV[1]['GLUE2PolicyRule']
                                if endpointID in dicVO:
                                        dic[serviceID]['vo'] = dicVO[endpointID]
                                else:
                                        dic[serviceID]['vo'] = []
		if 'domain' in conf['args']:
                        if 'domain' in conf:
                                dic[serviceID]['domain'] = [conf['domain']]
                        else:
                                if 'resultServices' not in locals():
                                        resultServices = request('(objectClass=GLUE2Service)')
                                if 'dicDomain' not in locals():
                                        dicDomain = {}
                                        for rS in resultServices:
                                                dicDomain[rS[1]['GLUE2ServiceID'][0]] = rS[1]['GLUE2ServiceAdminDomainForeignKey']
                                if serviceID in dicDomain:
                                        dic[serviceID]['domain'] = dicDomain[serviceID]
                                else:
                                        dic[serviceID]['domain'] = []
		if 'service-capability' in conf['args']:
			if 'service-capability' in conf:
				dic[serviceID]['service-capability'] = [conf['service-capability']]
			else:
                                if 'resultServices' not in locals():
                                        resultServices = request('(objectClass=GLUE2Service)')
                                if 'dicCapability' not in locals():
					dicCapability = {}
                                        for rS in resultServices:
                                                dicCapability[rS[1]['GLUE2ServiceID'][0]] = rS[1]['GLUE2ServiceType']
                                if serviceID in dicCapability:
                                        dic[serviceID]['service-capability'] = dicCapability[serviceID]
                                else:
                                        dic[serviceID]['service-capability'] = []
		if 'type' in conf['args']:
                        if 'type' in conf:
                                dic[serviceID]['type'] = [conf['type']]
                        else:
                                if 'resultServices' not in locals():
                                        resultServices = request('(objectClass=GLUE2Service)')
				if 'dicType' not in locals():
                                        dicType = {}
                                        for rS in resultServices:
                                                dicType[rS[1]['GLUE2ServiceID'][0]] = rS[1]['GLUE2ServiceType']
                                if serviceID in dicType:
                                        dic[serviceID]['type'] = dicType[serviceID]
                                else:
                                        dic[serviceID]['type'] = []
		if 'capability' in conf['args']:
                        if 'GLUE2EndpointCapability' in res[1]:
                                dic[serviceID]['capability'] = res[1]['GLUE2EndpointCapability']
                        else:
                                dic[serviceID]['capability'] = []
		if 'interface' in conf['args']:
			dic[serviceID]['interface'] = res[1]['GLUE2EndpointInterfaceName']
		if 'interface-version' in conf['args']:
			if 'GLUE2EndpointInterfaceVersion' in res[1]:
				dic[serviceID]['interface-version'] = res[1]['GLUE2EndpointInterfaceVersion']
			else:
				dic[serviceID]['interface-version'] = []
		if 'state' in conf['args']:
			dic[serviceID]['state'] = res[1]['GLUE2EndpointHealthState']
		if 'quality' in conf['args']:
			dic[serviceID]['quality'] = res[1]['GLUE2EndpointQualityLevel']
	if len(dic) == 0:
		sys.exit('Error: No result. Verify search parameters.')
	return dic 

def list_attr():
	""" Returns a list of values for a given attribute """

	try:
		oClass = attributes[conf['list']][0]
		key = attributes[conf['list']][1]
	except KeyError:
		sys.exit('Error: wrong attribute.')
	result = request('objectClass=GLUE2'+oClass)
	if oClass == 'AccessPolicy':
		oClass = 'Policy'
        list=[]
        for r in result:
		if 'GLUE2'+oClass+key in r[1]:
			if r[1]['GLUE2'+oClass+key][0] not in list:
				list.append(r[1]['GLUE2'+oClass+key][0])
		else:
			if 'None' not in list:
				list.append('None')
	list.sort()
	return list

def serialize_output(dic):
        """ Return the output with the wished format """

	if 'csv' in conf:
		list=[]
		for i in dic:
                        list.append(str(dic[i]['url'][0]))
                output = ','.join(list)
        elif 'json' in conf:
                output = json.dumps(dic)
	elif 'munge' in conf:
		list = []
		for i in dic:
			dicTmp = {
				"Service_Type":dic[i]['type'],
				"Service_Capability":dic[i]['service-capability'],
				"Service_Admin_Domain":dic[i]['domain'],
				"Service_Endpoint_URL":dic[i]['url'],
				"Endpoint_Capability":dic[i]['capability'],
				"Endpoint_Interface_Name":dic[i]['interface'],
				"Endpoint_Interface_Version":dic[i]['interface-version'],
				"Endpoint_Quality_Level":dic[i]['quality']
				}
			list.append(json.dumps(dicTmp))
		output = '['+','.join(list)+']'
        else:
		list=[]
		for i in dic:
			list.append('url: '+','.join(dic[i]['url']))
			for j in conf['args']:
				list.append(j+': '+','.join(dic[i][j]))
			list.append('')
                output = '\n'.join(list)
        return output

if __name__ == "__main__":
    main(sys.argv[1:])
