#!/usr/bin/env python
##############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2011.
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS
# OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
#
# NAME :        check_webdav_endpoint
#
# DESCRIPTION : Checks the webdav interface to an endpoint
#
# AUTHORS :     Ivan Calvet <ivan.calvet@cern.ch>
#
##############################################################################

import os
import time
import pycurl
import ldap
from lcgdmcommon import *

class check_webdav_endpoint:
  "Check if an endpoint defined by the hostname is available for writing through https by a member from the specified VO in a reasonable amount of time."
  __version__     = "1.2.1"
  __nagios_id__   = "DM-WEBDAV-ENDPOINT"

  # Defaults
  DEFAULT_WARNING  = 3
  DEFAULT_CRITICAL = 10
  DEFAULT_TIMEOUT  = 10
  DEFAULT_PORT     = 443

  # Specific parameters, where key = short, value = long (i.e. {"h":"help", "C:":"command="})
  # getopt format. The long version will be the one passed even when the short is specified
  __additional_opts__ = {"w:": "warning=",
                         "c:": "critical=",
                         "t:": "timeout=",
                         "H:": "hostname=",
                         "p:": "port=",
                         "P:": "path=",
                         "o:": "vo=",
                         "x:": "proxy="}

  # Specific usage information
  __usage__ = """
\t-H, --hostname\tThe hostname to query. (Mandatory)
\t    --vo\tThe Virtual Organization. (Mandatory)
\t-x, --proxy\tThe path to the proxy to use. (Mandatory)
\t-p, --port\tThe server port. (Optionnal, default: %d)
\t-P, --path\tThe optionnal path. (Optionnal)
\t-w, --warning\tSets the warning value, in seconds. (Optionnal, default: %d)
\t-c, --critical\tSets the critical value, in seconds. (Optionnal, default: %d)
\t-t, --timeout\tSets the timeout value, in seconds. (Optionnal, default: %d)

Warning and critical threshold can be set to trigger alert if the request delay
is too high.

Description of work executed by the probe:

\t1. Construct the URL based on the hostname. It uses the path if given or look
\tfor it in the GLUE2 bdii and chose the one that fit its type (DPM, dCache, ...).
\t2. Tries to write a test file with a PUT request
\t\tIf it gets the HTTP code 201, the test is passed.
\t\tOtherwise, the test has failed.
\t3. Clean the directory by removing the file.

""" % (DEFAULT_PORT, DEFAULT_WARNING, DEFAULT_CRITICAL, DEFAULT_TIMEOUT)

  # Methods

  def __init__(self, opt = {}, args = []):
    """
    Constructor

    @param opt  Contains a dictionary with the long option name as the key, and the argument as value
    @param args Contains the arguments not associated with any option
    """

    # Mandatory options:
    if "proxy" not in opt:
        return None
    else:
        self.proxy = opt["proxy"]
    if "hostname" not in opt:
        return None
    else:
        # Filtering of the hostname
        h = opt["hostname"]
        if "://" in h:
            h = h[h.find("://")+3:]
        if "/" in h:
            h = h[:h.find("/")]
        if ":" in h:
            self.port = h[h.find(":")+1:]
            h = h[:h.find(":")]
        self.host = h
    if "vo" not in opt:
        return None
    else:
        self.vo = opt["vo"]

    # Optionnal options:
    if "warning" in opt:
        self.warning = int(opt["warning"])
    else:
        self.warning  = int(self.DEFAULT_WARNING)
    if "critical" in opt:
        self.critical = int(opt["critical"])
    else:
        self.critical = int(self.DEFAULT_CRITICAL)
    if "timeout" in opt:
        self.timeout = int(opt["timeout"])
    else:
        self.timeout = int(self.DEFAULT_TIMEOUT)
    if "port" in opt:
        self.port = opt["port"]
    elif "port" not in dir(self):
        self.port = str(self.DEFAULT_PORT)
    self.url = "https://%s:%s" % (self.host, self.port)

    if "path" in opt:
        self.path = opt["path"]
        self.implementation = "Default"
    else:
        # Look for the endpoint in the BDII to know which kind of storage it is and determine the correct path
        try:
            bdii_list = os.environ['LCG_GFAL_INFOSYS'].split(',')
            for bdii in bdii_list:
                con = ldap.initialize('ldap://' + bdii)
                result = con.result(con.search('o=glue', ldap.SCOPE_SUBTREE, '(&(objectClass=Glue2Endpoint)(|(GLUE2EndpointInterfaceName=webdav)(GLUE2EndpointInterfaceName=https)(GLUE2EndpointInterfaceName=http))(GLUE2EndpointURL=*'+self.host+'*))'))
                break
        except:
            return None
        self.path = None
        try:
            endpoint = result[1][0][1]
        except:
            return None
        if "GLUE2EndpointImplementationName" in endpoint:
            self.implementation = endpoint["GLUE2EndpointImplementationName"][0]
        else:
            self.implementation = "Unknown"

  def request(self, url, action):
    """ Execute the pycurl request to test the endpoint """
    start = time.time()
    curl = pycurl.Curl()
    filename = "test_webdav_access.txt"
    test_file = "/var/lib/grid-monitoring/nagios-plugins-emi.webdav/" + filename
    file = open(test_file, "w")
    file.write("This is just a test file from the nagios probe nagios-plugins-webdav. You can delete it.\nIvan Calvet <ivan.calvet@cern.ch>")
    file.close()
    if action == 'write':
        url += filename
        curl.setopt(pycurl.POSTFIELDS, open(test_file, "rb").read())
        curl.setopt(pycurl.CUSTOMREQUEST, "PUT")
    elif action == 'delete':
        url += filename
        curl.setopt(pycurl.CUSTOMREQUEST, "DELETE")
    curl.setopt(pycurl.URL, url)
    curl.setopt(pycurl.CONNECTTIMEOUT, self.timeout)
    curl.setopt(pycurl.TIMEOUT, self.timeout)
    curl.setopt(pycurl.SSL_VERIFYPEER, 1)
    curl.setopt(pycurl.SSL_VERIFYHOST, 2)
    curl.setopt(pycurl.FOLLOWLOCATION, 1)
    curl.setopt(pycurl.WRITEFUNCTION, lambda x: None)
    if self.proxy:
      curl.setopt(pycurl.CAINFO, self.proxy)
      curl.setopt(pycurl.SSLCERT, self.proxy)
      curl.setopt(pycurl.CAPATH, "/etc/grid-security/certificates")

    return_code = ""
    try:
        curl.perform()
        code = curl.getinfo(pycurl.HTTP_CODE)
        curl.close()
    except Exception, e:
        e = str(e)
        return_code = e[e.find('(')+1:e.rfind(')')]
        code = 0
    os.remove(test_file)
    end = time.time()
    return (code, return_code, end - start)


  def main(self):
    """
    Test code itself. May raise exceptions.

    @return A tuple (exit code, message, performance)
    """
	
    if 'proxy' not in dir(self):
        return (EX_UNKNOWN, "No proxy was specified.", None)
    if 'host' not in dir(self):
        return (EX_UNKNOWN, "No hostname was specified.", None)
    if 'vo' not in dir(self):
        return (EX_UNKNOWN, "No Virtual Organization was specified.", None)
    if 'implementation' not in dir(self):
        if 'path' not in dir(self):
            return (EX_UNKNOWN, "No BDII available.", None)
        else:
            return (EX_OK, "No entry in the BDII.", None)

    host = self.host[self.host.find(".")+1:]
    path = {'Default': [self.path],
            'Unknown': ['/', '/%s/' % self.vo, '/pnfs/%s/%s/' % (host, self.vo), '/pnfs/%s/data/%s/' % (host, self.vo), '/dpm/%s/home/%s/' % (host, self.vo)],
            'DPM': ['/dpm/%s/home/%s/' % (host, self.vo)],
            'dCache': ['/', '/%s/' % self.vo, '/pnfs/%s/%s/' % (host, self.vo), '/pnfs/%s/data/%s/' % (host, self.vo)]}
    for p in path[self.implementation]:
        self.request(self.url + p, 'delete')
        (code, return_code, ellapsed_time) = self.request(self.url + p, 'write')
        if code in [0, 201]:
            self.url += p
            break

    if ellapsed_time >= self.critical:
        return_status = EX_CRITICAL
    elif ellapsed_time > self.warning:
        return_status = EX_WARNING
    else:
        return_status = EX_OK 
    performance = "time=%.4fs;%.4f;%.4f" % (ellapsed_time, self.warning, self.critical)
    
    if code == 201:
        return_code = "Test passed"
        self.request(self.url, 'delete')
    elif code == 0:
        return_status = EX_CRITICAL
        return_code = "Exception " + return_code + " - URL: " + self.url
    else:
        if code == 301:
            return_code = "Moved Permanently"
        elif code == 401:
            return_code = "Unauthorized"
        elif code == 403:
            return_code = "Forbidden"
        elif code == 404:
            return_code = "Not found"
        elif code == 405:
            return_code = "Method not allowed"
        elif code == 500:
            return_code = "Internal Server Error"
        return_status = EX_CRITICAL
        return_code = "Error HTTP %s - %s - URL: %s" % (str(code), return_code, self.url + path[self.implementation][-1])
    
    return (return_status, return_code, performance)

 
# When called directly
if __name__ == "__main__":
  run(check_webdav_endpoint)
