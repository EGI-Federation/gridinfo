#!/bin/bash
##############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2010.
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at #
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS
# OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
#
# NAME :        glite-info-create
#
# DESCRIPTION : This script helps you create LDIF files.
#
# AUTHORS :     David.Horat@cern.ch
#               Laurence.Field@cern.ch
#
# WEB:          http://cern.ch/gridinfo
#
##############################################################################

# 0. Functions

# $1 Level: 0:ERROR, 1:WARNING, 2:INFO, 3:DEBUG
# $2 Message
function log() {
  logger='/usr/bin/logger'
  tag='glite-info-create'
  case $1 in
    0)
      msg="[ERROR] $2"
      if [ $verbose -ge "0" ]; then echo $msg >&2; fi
      $logger -t $tag -p user.error $msg
      exit 1;;
    1)
      msg="[WARNING] $2"
      if [ $verbose -ge "1" ]; then echo $msg; fi
      $logger -t $tag -p user.warning $msg;;
    2)
      msg="[INFO] $2"
      if [ $verbose -ge "2" ]; then echo $msg; fi
      $logger -t $tag -p user.info $msg;;
    3)
      msg="[DEBUG] $2"
      if [ $verbose -ge "3" ]; then echo $msg; fi
      $logger -t $tag -p user.debug $msg;;
    *)
      msg="[PROGRAM ERROR] Level $1 does not exist"
      echo $msg >&2
      $logger -t $tag -p user.crit $msg
      exit 1;;
  esac
}

function print_help() {
  cat << EOF >&2
Usage:
  glite-info-create.sh -m <module> [-i <ifaces>] [-t <templates>] [-c <configs>]
                       [-p <path>] [-o <outpath>] [-v verbose]
       
Parameters:
  <module>    The module you are using. E.g.: site
  <ifaces>    The interface you want to use. E.g.: glue, wlcg (default)
  <templates> The template you want to use. E.g.: glue1, glue2 (all default)
  <configs>   The config file location if outside from the module directory
  <path>      The path for the module directory. Default: /etc/glite-info-create
  <outpath>   The path for the output directory. Default: <path>/output
  <verbose>   Verbose level: 0:ERROR, 1:WARNING, 2:INFO, 3:DEBUG. Default: 0

Examples:
  glite-info-create.sh -m site
  glite-info-create.sh -m site -i 'glue wlcg' -t glue2 -c /etc/site.cfg

Web site: http://cern.ch/gridinfo
EOF
}

# 1. Basic setup
`unalias -a` # Remove all aliases from this new shell
STARTTIME=`date +%s`
VERSION='0.5'
echo "Welcome to gLite Info Create v$VERSION"
#fullpath="$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"
if [ $# -lt 1 ] || [ "$1" = "-h" ] || [ "$1" = "-help" ] || [ "$1" = "--help" ]; then
  print_help
  exit 1
fi

# 2. Set default values and parse command line arguments
interfaces='wlcg'
templates='glue1 glue2'
ldif_files=''
fullpath='/etc/glite-info-create'
verbose=0
while getopts ":m:i:t:c:p:o:v:" opt; do
  case $opt in
    i) interfaces=$OPTARG;;
    t) templates=$OPTARG;;
    c) config_files=$OPTARG;;
    m) module=$OPTARG;;
    p) fullpath=${OPTARG%/};;
    o) outputpath=${OPTARG%/};;
    v) verbose=$OPTARG;;
    \?) log 0 "Invalid option: -$OPTARG";;
    :) log 0 "Option -$OPTARG requires an argument.";;
  esac
done
log 3 "Changing to $fullpath"
cd $fullpath

if [ -z $module ]; then
  print_help
  log 0 "Parameter -m <module> is mandatory"
fi
if [ -z $config_files ]; then config_files="$module.*.cfg"; fi
if [ -z $outputpath ]; then outputpath="$fullpath/output"; fi
if [ -d $outputpath ]; then
  log 3 "Output directory exists: $outputpath"
else
  log 3 "Creating output path $outputpath"
  mkdir $outputpath
  if [ $? -ne 0 ]; then 
    log 0 "You don't have permissions to create output directory"
  fi
fi
touch $outputpath/test
if [ $? -ne 0 ]; then
  log 0 "You don't have permissions to write in the output directory"
fi
rm $outputpath/test

# 3. Source the config file
for config_file in $config_files; do
  if [ ! -f $config_file ]; then
    log 0 "$config_file is not a valid config file"
  fi
  source $config_file
  log 3 "Using config file $config_file"

  # 4. Check all needed variables are present using the interface
  for interface in $interfaces; do
    interface_file="$module/$module.$interface.ifc"    
    log 3 "Checking interface $interface_file"
    if [ ! -f $interface_file ]; then
      log 0 "$interface_file is not a valid interface file"
    fi
    source $interface_file
    MANDATORY_VARS="$MANDATORY_SINGLEVALUED_VARS $MANDATORY_MULTIVALUED_VARS"
    OPTIONAL_VARS="$OPTIONAL_SINGLEVALUED_VARS $OPTIONAL_MULTIVALUED_VARS"
    MULTIVALUED_VARS="$MANDATORY_MULTIVALUED_VARS $OPTIONAL_MULTIVALUED_VARS"
    SINGLEVALUED_VARS="$MANDATORY_SINGLEVALUED_VARS $OPTIONAL_SINGLEVALUED_VARS"
    for var in $MANDATORY_VARS; do
      eval val=\$$var
      if [ "x$val" = "x" ]; then
        log 0 "$var has no value. Check $config_file"
      fi
    done
    for var in $OPTIONAL_VARS; do
      eval val=\$$var
      if [ "x$val" = "x" ]; then
        log 1 "$var has no value. Fix it in $config_file"
      fi
    done
  done

  # 5. Fill the templates so all variables are filled
  log 2 "Generating files"
  for template in $templates; do
    template_file=$module/$module.$template.tpl
    if [ ! -f $template_file ]; then
      log 0 "$template_file is not a valid template file"
    fi
    line=${config_file#*$module.}
    num=${line%%.cfg*}
    ldif_file_name=$module.$num.$template.ldif
    ldif_file_names="$ldif_file_names $ldif_file_name"
    ldif_file=$outputpath/$ldif_file_name
    if [ -f $ldif_file ]; then
      log 1 "$ldif_file already existed. It has been overwritten."
    fi
    cp $template_file $ldif_file
    # Substitute singlevalued attributes
    for var in $SINGLEVALUED_VARS; do
      eval val=\$$var
      # If there is no value, delete the line. Otherwise, substitute it.
      if [ "x$val" = "x" ]; then
        sed -i "/$var/d" $ldif_file
      else
        sed -i "s|\$$var|$val|g" $ldif_file
      fi
    done
    # Substitute mutivalued attributes
    for var in $MULTIVALUED_VARS; do
      eval multiple=\$$var
      if [ "x$multiple" = "x" ]; then
        sed -i "/\$$var/d" $ldif_file
      else
        # E.g.: GlueSiteLatitude: $SITE_LAT
        line=`sed -n "/$var/p" $ldif_file` # Select line
        # E.g.: GlueSiteLatitude: 
        line=${line%\$$var} # Strip the value from the original line
        output=''
        for val in $multiple; do
          if [ -z $output ]; then
            output="$val\n"
          else
            output=$output$line$val"\n"
          fi
        done
        output=${output%\\\n} # Remove trailing new line
        sed -i "s|\$$var|$output|" $ldif_file
      fi
    done
  done
done

#6. Finalize
echo "OUTPUT FOLDER:"
echo $outputpath
echo "NEW FILES GENERATED:"
for ldif_file_name in $ldif_file_names; do
  echo $ldif_file_name
done
RUNTIME=$[`date +%s` - $STARTTIME]
echo "Finished! It took $RUNTIME seconds to run"
