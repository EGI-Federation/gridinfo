#!/usr/bin/env python
##############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2010.
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at #
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS
# OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
#
# NAME :        glite-info-create
#
# DESCRIPTION : This script helps you create LDIF files.
#
# AUTHORS :     David.Horat@cern.ch
#               Laurence.Field@cern.ch
#
# WEB:          http://cern.ch/gridinfo
#
##############################################################################

import logging
import sys
from lib import testingutils

class BdiiInfoTesting:
  objects = { 'glue2location': 'LocationTest',
              'glue2contact': 'ContactTest',
              'glue2admindomain': 'AdminDomainTest'}

  def main(self):
    config = testingutils.parse_options()
    log = logging.getLogger(self.__class__.__name__)
    hdlr = logging.StreamHandler(sys.stderr)
    formatter = logging.Formatter('[%(levelname)s]: %(message)s')
    hdlr.setFormatter(formatter)
    log.addHandler(hdlr)
    log.setLevel(config['debug'])
    #my_errors = testingutils.error_logger(self.__class__.__name__, self.error_messages())

    if config.has_key('file'):
      source = "file://%s" % (config['file'])
    if config.has_key('host'):
      source = "ldap://%s:%s/%s?filter=%s" % (config['host'], config['port'], config['bind'], filter)

    ldif = testingutils.fast_read_ldif(source)
    ldif_lower = ldif.lower()
    dns_dict = testingutils.get_dns(ldif)
    count = 0
    for dn in dns_dict:
      entry = ldif[dns_dict[dn][0]:dns_dict[dn][1]].strip()
      entry = testingutils.convert_entry(entry)
      for checkObject, className in self.objects.iteritems():
        for object_class in entry['objectclass']:
          if object_class.lower() == checkObject:
            __import__('glue20.' + className)
            module = sys.modules['glue20.' + className]
            inst = getattr(module, className)()
            inst.run(entry, ldif, ldif_lower, log)

if __name__ == "__main__":
  sys.exit(BdiiInfoTesting().main())
