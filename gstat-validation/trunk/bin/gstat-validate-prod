#!/usr/bin/python

import re
import sys
import time
import urllib2
import logging
import cx_Oracle
import gsutils

error_messages= {
    "gstat.bdii.published": ["BDII Service is not published","ERROR"],
    "gstat.bdii.goc": ["BDII Service has not been found in the GOC DB","WARNING"]
    }

def get_bdiis(type):

    bdiis = {}

    # Get the DB cursor
    my_db=None
    try:
        my_db = gsutils.db()
        db_cur = my_db.get_cursor()
    except Exception, e:
        sys.stderr.write("Error: %s\n" % (e))
        sys.exit(1)

    command="select UniqueID from Entity where Type='bdii_%s';" %(type)
    db_cur.execute(command)
    results = db_cur.fetchall()
    for row in results:
        bdii_host=row[0].split(":")[0]
        bdii_host=bdii_host.split("_")[0]
        bdiis[bdii_host] = None
        
    my_db.close()
    
    return bdiis

def get_site_bdiis_from_list(bdiis):

    add_bdii = {}

    try:
        url="http://lcg-bdii-conf.cern.ch/bdii-conf/bdii.conf"
        response = urllib2.urlopen(url).readlines()
    except Exception, e:
        sys.stderr.write("Error: %s\n%s\n" % (url,e))
    for line in response:
        if (re.search("ldap",line)):
            sitename=re.sub("ldap.*","",line).strip()
            hostname=re.sub(".*ldap://","",line)
            hostname=re.sub(":.*","",hostname).strip()
            if ( not bdiis.has_key(hostname)):
                    bdiis[hostname] = None
                    add_bdii[hostname] = sitename

    # Get the DB cursor
    my_db=None
    try:
        my_db = gsutils.db()
        db_cur = my_db.get_cursor()
    except Exception, e:
        sys.stderr.write("Error: %s\n" % (e))
        sys.exit(1)

    timestamp=time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())                
    commands = []
    for bdii in add_bdii.keys():
        commands.append("replace into Entity(UniqueID,Type,Hostname,TimeStamp) values ('%s','bdii_site','%s','%s');" % (bdii,bdii,timestamp))
        commands.append("replace into EntityRelationship (Subject,Object,Predicate,TimeStamp) values ('%s','%s','SiteService','%s');" % (sitename, bdii, timestamp))

    for line in commands:
        db_cur.execute(line) 

    my_db.close()

    return bdiis

def test_published(bdiis,type):

    published = {}
    
    # Set filter to reduced the amount of information
    filter = "'(&(objectClass=GlueService)(GlueServiceType=bdii_%s))'" %(type)
    
    if config.has_key('file'):
        source = "file://%s" % (config['file'])
    if config.has_key('host'):
        source = "ldap://%s:%s/%s?filter=%s" % (config['host'], config['port'], config['bind'], filter)
            
    ldif = gsutils.fast_read_ldif(source)
    dns = gsutils.get_dns(ldif)

    for dn in dns:
        entry = ldif[dns[dn][0]:dns[dn][1]].strip()
        entry = gsutils.convert_entry(entry)
        if ( entry.has_key("GlueServiceEndpoint") ):
            hostname=re.sub(".*ldap://","",entry["GlueServiceEndpoint"][0])
            hostname=re.sub(":.*","",hostname).strip()
            published[hostname] = None

    for bdii in bdiis:
        
        if ( not published.has_key(bdii)):
            my_errors.log(bdii,'gsutils.bdii.published', '%s BDII Service is hostname %s is not published in the information system' % (type, bdii), bdii)

def test_goc(bdiis, type):

    config = gsutils.get_config()   
    
    connection_string = '''%s/%s@(DESCRIPTION =
 (LOAD_BALANCE = yes)
 (FAILOVER = ON)
 (ADDRESS = (PROTOCOL = TCP)(HOST = db1-vip.ngs.rl.ac.uk)(PORT = 1521))
 (ADDRESS = (PROTOCOL = TCP)(HOST = db2-vip.ngs.rl.ac.uk)(PORT = 1521))
 (CONNECT_DATA =
  (SERVICE_NAME = NGS11.esc.RL.AC.UK)
  (FAILOVER_MODE =
   (TYPE=SESSION)
   (METHOD=BASIC)
   )
  )
 )''' %(config['GOC_USER'], config['GOC_PASSWD']) 


    # http://goc.grid.sinica.edu.tw/gocwiki/GOCDB3_development?action=AttachFile&do=get&target=Schema.png
    goc_db = cx_Oracle.connect(connection_string)
    cursor = goc_db.cursor()
    cursor.execute("select HOSTNAME, NODE_TYPE_NAME from NODES, NODE_TYPE_MAPPINGS, NODE_TYPES where NODES.NODE_ID=NODE_TYPE_MAPPINGS.NODE_ID AND NODE_TYPE_MAPPINGS.NODE_TYPE_ID=NODE_TYPES.NODE_TYPE_ID AND NODE_TYPE_NAME ='%s-BDII'" %(type.capitalize()))
    result = cursor.fetchall()

    goc= {}
    for row in result:
        goc[row[0]] = None

    for bdii in bdiis:
        if (not goc.has_key(bdii)):
            my_errors.log(bdii,'gsutils.bdii.goc', '%s level BDII Service hostname %s is not registered in the GOC database' % (type.capitalize(), bdii), bdii)
    
                                              
if __name__ == "__main__":
    
    global my_errors
    
    config = gsutils.parse_options()
    
    log = logging.getLogger('glite-validate-prod')
    hdlr = logging.StreamHandler(sys.stderr)
    formatter = logging.Formatter('[%(levelname)s]: %(message)s')
    hdlr.setFormatter(formatter)
    log.addHandler(hdlr)
    log.setLevel(config['debug'])

    # Initialize error logger.
    my_errors=gsutils.error_logger('gstat-validate-prod',error_messages)

    # Test top level BDIIs
    bdiis = get_bdiis("top")
    test_published(bdiis,"top")
    test_goc(bdiis,"top")

    # Test site level BDIIs
    bdiis = get_bdiis("site")
    bdiis = get_site_bdiis_from_list(bdiis)
    test_published(bdiis,"site")
    test_goc(bdiis,"site")

    gsutils.do_output(my_errors,config)   
    gsutils.do_exit(my_errors)   

        
