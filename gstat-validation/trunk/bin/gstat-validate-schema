#!/usr/bin/python
##############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2004.
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at #
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS
# OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
#
# NAME :        gstat-validate-schema
#
# DESCRIPTION : This script checks LDIF against the schema using an OpenLDAP DB
#
# AUTHORS :     Laurence.Field@cern.ch, Felix.Ehm
#
# NOTES :
#
##############################################################################

import os
import sys;
import ldap;
import time;
import signal;
import logging;
import ldap.modlist as modlist
import gsutils 
                 
error_messages = {
    "Object class violation" : ["Object class violation", "WARNING"],
    "Naming violation" : ["Naming violation", "WARNING"],
    "No such object" : ["No such object", "WARNING"],
    "Constraint violation" : ["Constraint violation", "WARNING"],
    "Type or value exists" : ["Type or value exists", "WARNING"],
    "Invalid syntax" : ["Invalid syntax", "WARNING"],
    "Undefined attribute type" : ["Invalid syntax", "WARNING"],
    "Server is unwilling to perform" : ["Constraint violation", "ERROR"],
    "Invalid DN syntax": ["Invalid syntax", "WARNING"], 
}

def start_slapd():
    global config

    log.debug("Starting slapd server ...")
    #Set up Signal handler for SIGTERM (kill -15) and SIGINT (ctrl-c)
    signal.signal(signal.SIGTERM, handler)
    signal.signal(signal.SIGINT, handler)
    
    process_pid=os.getpid()
    config['tmp_dir']='/tmp/gstat-validate-schema-' + str(process_pid)    
    if not os.path.exists(config['tmp_dir']):
        os.mkdir(config['tmp_dir']);
        file=open(config['tmp_dir'] + '/slapd.conf','w')
        file.write('''
include /etc/openldap/schema/core.schema
include /etc/ldap/schema/Glue-CORE.schema
include /etc/ldap/schema/Glue-CE.schema
include /etc/ldap/schema/Glue-CESEBind.schema
include /etc/ldap/schema/Glue-SE.schema
include /etc/ldap/schema/Glue-MDS.schema

schemacheck     on
pidfile         ''' + config['tmp_dir'] + '''/slapd.pid
argsfile        ''' + config['tmp_dir'] + '''/slapd.args
idletimeout     120
sizelimit       80000
timelimit       2400

#######################################################################
# ldbm database definitions
#######################################################################

database        bdb
cachesize       60000
dbnosync
suffix          "o=grid"
rootdn          "o=grid"
rootpw          secret
directory       ''' + config['tmp_dir'] + '''
''') 

        file.close()

        # Start slapd server
        command='slapd -f ' + config['tmp_dir'] + '/slapd.conf -h ldap://localhost:21700'

        response=os.system(command)
        time.sleep(1)
        if not os.path.exists(config['tmp_dir'] + "/slapd.pid"):
            sys.stderr.write("Error: Could not start slapd.\n")
            print command
            #os.system("rm -rf " + config['tmp_dir'])
            sys.exit(1)
    else:
        sys.stderr.write("Error: Directory %s already exists") % (config['tmp_dir'])
        sys.exit(1)

def stop_slapd():
    global config

    if os.path.exists(config['tmp_dir'] + "/slapd.pid"):
        log.debug("Stopping slapd server ...")
        slapd_pid=open(config['tmp_dir'] + "/slapd.pid").read()
        os.kill(int(slapd_pid), signal.SIGTERM)
        os.system("rm -rf " + config['tmp_dir'])
    else:
        os.system("rm -rf " + config['tmp_dir'])

# Signal handler
def handler(signum, frame):
    sys.stderr.write("Shutting Down slapd\n")
    stop_slapd()
    sys.exit(0)

# Schema validation function
def test_ldif(entry):
    log.debug("Validating LDIF entry")

    connect=ldap.initialize("ldap://localhost:21700")
    connect.simple_bind_s("o=grid","secret")

    dn  = entry['dn'][0]
    entry.pop('dn')
    try:
        connect.add(dn, modlist.addModlist(entry))
        connect.result()
            
    except Exception, e:
        my_errors.log(dn, e[0]['desc'], e[0]['info'], gsutils.get_site(dn))

        # Create stub as a place holder
        entry={}
        value=dn.split(",")[0]
        index=value.find("=")
        object_class = value[:index]
        object_class = object_class.replace("LocalID","")
        object_class = object_class.replace("UniqueID","")
        if (object_class == 'GlueServiceDataKey'):
            object_class = 'GlueServiceData'
        elif (object_class == 'GlueCESEBindGroupCE'):
            object_class = 'GlueCESEBindGroup'
        elif (object_class == 'GlueCESEBindSE'):
            object_class = 'GlueCESEBind'
            entry['GlueCESEBindCEUniqueID'] = "dummy"
        entry['objectClass']=['GlueTop',object_class]
        entry[value[:index]]=value[index + 1:]
                
        # Try to create stub for rejected entry
        try:
            connect.add(dn, modlist.addModlist(entry))
            connect.result()
        except Exception, e:
            sys.stderr.write("Could not add placeholder for %s\n" % (dn))
                                                                  
if __name__ == "__main__":
   global my_errors, log
   
   config = gsutils.parse_options()

   log = logging.getLogger('glite-validate-example')
   hdlr = logging.StreamHandler(sys.stderr)
   formatter = logging.Formatter('[%(levelname)s]: %(message)s')
   hdlr.setFormatter(formatter)
   log.addHandler(hdlr)
   log.setLevel(config['debug'])

   # Initialize error logger.
   my_errors=gsutils.error_logger('gstat-validate-schema',error_messages)

   # Set filter to reduced the amount of information
   filter = "'(objectclass=*)'"
   
   if config.has_key('file'):
       source = "file://%s" % (config['file'])
   if config.has_key('host'):
       source = "ldap://%s:%s/%s?filter=%s" % (config['host'], config['port'], config['bind'], filter)
      
   ldif = gsutils.fast_read_ldif(source)
       
   dns = gsutils.get_dns(ldif)
   ordered_dns = dns.keys()
   ordered_dns.sort(lambda x, y: cmp(len(x), len(y)))

   start_slapd()

   for dn in ordered_dns:  
       entry = ldif[dns[dn][0]:dns[dn][1]].strip()
       if  ( dn[:11].lower() == "mds-vo-name" ):
           value = dn[12:dn.index(",")]
           entry = "dn: %s\nObjectClass: MDS\nObjectClass: GlueTop\nMds-Vo-Name: %s\n" %(dn,value)
       if  ( dn[:6].lower() == "o=grid" ):
           entry = "dn: o=grid\nObjectClass: organization\nObjectClass: GlueTop\no: grid\n"
       entry = gsutils.convert_entry(entry)
       test_ldif(entry)

   stop_slapd()

   gsutils.do_output(my_errors,config)   
   gsutils.do_exit(my_errors)   
