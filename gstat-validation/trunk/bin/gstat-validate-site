#!/usr/bin/python

import os
import re
import sys
import time
import socket
import string
import urllib
import logging
import dns.resolver
import gsutils

error_messages= {
      "site.mandatory_attrs.missing_attr":      ["A mandatory attribute is missing. ","ERROR"],
      "site.mandatory_attrs.exception":         ["Unexpected error finding attributes. ","ERROR"],
      "site.values.attribute_empty":            ["One of the attributes have no values. ","ERROR"],
      "site.values.typeError":                  ["Unexpected error in attribute (Possible error type). ","ERROR"],
      "site.ID_equals_name.difference":         ["GlueSiteUniqueID and GlueSiteName are different. ","ERROR"],
      "site.ID_equals_name.typeError":          ["Unexpected error in GlueSiteUniqueID or GlueSiteNam (Possible error type). ","ERROR"],
      "site.email.bad_syntax":                  ["Incorrect email address syntax. ","ERROR"],
      "site.email.root_localhost":              ["The e-mail address cannot be root@localhost. ","ERROR"],
      "site.email.not_answering_server":        ["The e-mail server does not answer. ","ERROR"],
      "site.email.typeError":                   ["Unexpected error in email address (Possible error type). ","ERROR"],
      "site.coordinates.no_coordinates":        ["Could not get coordinates. ","ERROR"],
      "site.coordinates.no_location_in_google": ["Could not get the location from the search engine. ","ERROR"],
      "site.coordinates.incorrect_latitude":    ["Incorrect Latitude information. ","ERROR"],
      "site.coordinates.incorrect_longitude":   ["Incorrect Longitude information. ","ERROR"],
      "site.URL.incorrect":                     ["The GlueSiteWeb attribute has an incorrect or inexistent URL. ","ERROR"],
      "site.OhterInfo.no_GRID_info":            ["None of the fields in the GlueSiteOtherInfo contain the name of the GRID (GRID=X). ","ERROR"],
      "site.OhterInfo.incorrect_GRID_value":    ["The GRID value in GlueSiteOtherInfo is noc correct. ","ERROR"],                   
      "site.OhterInfo.no_complete_EGEE_info":   ["None of the fields in the GlueSiteOtherInfo contain EGEE_ROC and EGEE_SERVICE. ","ERROR"],
      "site.OhterInfo.incorrect_EGEE_ROC":      ["The field EGEE_ROC in GlueSiteOtherInfo does not contain a proper value. ","ERROR"],
      "site.OhterInfo.incorrect_EGEE_SERVICE":  ["The field EGEE_SERVICE in GlueSiteOtherInfo does not contain a proper value. ","ERROR"],
      "site.OhterInfo.missing_WLCG":            ["Not every WLCG field is present in GlueSiteOtherInfo. ","ERROR"],
      "site.OhterInfo.incorrect_format":        ["At least one of the GlueSiteOtherInfo fields is not in the correct format (KEY=VALUE). ","ERROR"]
}
                   

class GlueIncorrectFormat(Exception):
   def __init__(self, value):
      self.value = value
   def __str__(self):
      return repr(self.value)

      
def make_dict(fields):
   dict = {}
   for field in fields:
      field = field = field.replace("= ","=")
      field = field = field.replace(" =","=")
      if (re.match(".+=.+", field) == None):
         raise GlueIncorrectFormat, field
      info_key = field[0:(field.find("="))]
      info_value = field[(field.rfind("="))+1:]
      if dict.has_key(info_key):
         dict[info_key].append(info_value)
      else:
         dict.update({info_key:[info_value]})   
   return dict
      

            
def validateEmail(email):

   if len(email) > 7:
      if re.match("mailto:[ ]*.+\\@(\\[?)[a-zA-Z0-9\\-\\.]+\\.([a-zA-Z]{2,3}|[0-9]{1,3})(\\]?)$", email) != None:
         return 1
   return 0


def check_mandatory_attributes(site):
   site_id= site["GlueSiteUniqueID"]
   mandatory_fields = ["GlueSiteName", "GlueSiteUniqueID", "GlueSiteLatitude", "GlueSiteLongitude", "GlueSiteDescription", "GlueSiteLocation"]
   error_found = False
   try:
      for attribute in mandatory_fields:
         if not (site.has_key(attribute)):
            details = "Missing attribute: %s for site: %s." %(attribute, site_id)
            log.debug(error_messages["site.mandatory_attrs.missing_attr"][0]+details)
            my_errors.log(site_id, "site.mandatory_attrs.missing_attr", details, site_id)
            error_found = True
      if not error_found:
         log.info("No missing attribute in site %s" %site_id)
         
   except:
      details = "Site: %s." %(site_id)
      log.debug(error_messages["site.mandatory_attrs.exception"][0]+details)
      my_errors.log(site_id, "site.mandatory_attrs.exception", details, site_id)

      
def check_atributes_have_value(site):
   
   site_id= site["GlueSiteUniqueID"]
   error_found = False
   
   try:
   
      for attribute in site.keys():
         if (site[attribute] == [])             :
            details = "Empty attribute: %s for site: %s." %(attribute, site_id)
            log.debug(error_messages["site.values.attribute_empty"][0]+details)
            my_errors.log(site_id, "site.values.attribute_empty", details, site_id)
            error_found=True
      
      if not error_found:
         log.info("Every attribute in site %s has a value" %site_id)
                  
   # TODO: Change for a general exception
   except TypeError, e:
      details = "Incorrect attribute: %s for site: %s." %(attribute, site_id)
      log.debug(error_messages["site.values.typeError"][0]+details)
      my_errors.log(site_id, "site.values.typeError", details, site_id)      


def check_ID_equals_name(site):
   site_id= site["GlueSiteUniqueID"]
   try:
      if site_id==site["GlueSiteName"]:
         log.info("The names in site %s are correct" %site_id)
      else:
         details = "Site: %s." %(site_id)
         log.debug(error_messages["site.ID_equals_name.difference"][0]+details)
         my_errors.log(site_id, "site.ID_equals_name.difference", details, site_id)      
         
   except TypeError, e:
      details = "Site: %s." %(site_id)
      log.debug(error_messages["site.ID_equals_name.typeError"][0]+details)
      my_errors.log(site_id, "site.ID_equals_name.typeError", details, site_id)
      

def check_valid_mail_address(site, mail_servers):
   possible_e_addr = ["GlueSiteUserSupportContact", "GlueSiteSysAdminContact", "GlueSiteSecurityContact"]
   site_id= site["GlueSiteUniqueID"]
   
   for address in possible_e_addr:
      
      try:
         if site.has_key(address):
            for e_address in site[address]:
               
               server = e_address[(e_address.rfind("@")+1):]
               name = e_address[0:(e_address.rfind("@")-1)]
               
               #Check the e-mail sintax
               if not (validateEmail(e_address)):
                  details = "Incorrect email address: %s for the site: %s." %(address,site_id)
                  log.debug(error_messages["site.email.bad_syntax"][0]+details)
                  my_errors.log(site_id, "site.email.bad_syntax", details, site_id)   
               else:
                  log.info("The e-mail address syntax for %s is correct in site: %s" %(address, site_id))
                  
               #Check that the e-mail address is different from root@localhost etc.
               if (name == "root") or (server == "localhost"):
                  details = "Incorrect email address: %s for the site: %s." %(address,site_id)
                  log.debug(error_messages["site.email.root_localhost"][0]+details)
                  my_errors.log(site_id, "site.email.root_localhost", details, site_id)   
                  
               else:
                  log.info("The e-mail address for %s is not root@localhost in site: %s" %(address, site_id))
                     
               #Check if the e-mail server exists
               if (not mail_servers.has_key(server)):
                  if not ( dns.resolver.query(server, 'MX') == []):
                     log.info("The e-mail server for %s exists in site: %s" %(address, site_id))
                     mail_servers.update({server:True})
               else:
                  if not mail_servers[server]:
                     details = "Incorrect email address: %s for the site: %s." %(address,site_id)
                     log.debug(error_messages["site.email.not_answering_server"][0]+details)
                     my_errors.log(site_id, "site.email.not_answering_server", details, site_id)   
                     
      except TypeError, e:
         details = "Incorrect email address: %s for the site: %s." %(address,site_id)
         log.debug(error_messages["site.email.typeError"][0]+details)
         my_errors.log(site_id, "site.email.typeError", details, site_id)   
      except (dns.resolver.NoAnswer, dns.resolver.NXDOMAIN, dns.resolver.Timeout), e:
         details = "Incorrect email address: %s for the site: %s." %(address,site_id)
         log.debug(error_messages["site.email.not_answering_server"][0]+details)
         my_errors.log(site_id, "site.email.not_answering_server", details, site_id)   
         
#
# Compares the latitude and longitude with Google Maps
#
def check_coordinates(site):
    site_id= site["GlueSiteUniqueID"]
    try:
        location = site['GlueSiteLocation'][0]
        lat = float(site['GlueSiteLatitude'][0])
        longit = float(site['GlueSiteLongitude'][0])
    except Exception, e:
        details = "Site: %s" %(site_id)
        log.debug(error_messages["site.coordinates.no_coordinates"][0]+details)
        my_errors.log(site_id, "site.coordinates.no_coordinates", details, site_id)
        return 0
   
    glat = None
    glong = None

    # Clean location
    location = location.replace(", ",",")
    location = location.lower(  )

    if ( locations.has_key(location)):
        index=locations[location].find(",")
        glat = float(locations[location][:index])
        glong = float(locations[location][index+1:])
    else:
       log.debug("Location not found in cache")
       # Download the lat and long for the location from google maps
       output=""
       try:
          time.sleep(2)
          url="http://maps.google.com/?q=%s&output=kml" % (location.replace(" ","%20"))
          output=urllib.urlopen(url).read()
       except Exception, e:
          log.error(str(e)+ "\n")
          sys.exit(1)
       log.debug("Got response")     
       # Get the coordinates entry from the xml
       index=output.find("<coordinates>")
       output=output[index+13:len(output)]
       index=output.find("</coordinates>")
       output=output[0:index]
            
       # Split the coordinates and remember the ones from google.
       output=output.split(",")
       try:
          glong=float(output[0])
          glat=float(output[1])
       except ValueError, e:
          log.debug("Incorrect value found for location" )
          return

       #Store Location
       locations[location] = str(glat)  + "," + str(glong)

       try:
          log.debug("Writing locations" )
          cache_file = "/usr/share/gstat/locations"
          file = open(cache_file, 'w')
          for location in locations:   
             file.write("%s=%s\n" %(location, locations[location].strip()))
          file.close()
       except IOError, e:
          log.error("Cannot open cache file, %s." % cache_file)
          sys.exit(1)
                         
    # Comapre the google coordinates to the original coordinates.
    tolerance=0.5
               
    diff=abs(glat - lat)
    if (diff > tolerance ):
        details = "Latitude for %s is %s but should be %s." %(location, lat, glat)
        log.debug(error_messages["site.coordinates.incorrect_latitude"][0]+details)
        my_errors.log(site_id, "site.coordinates.incorrect_latitude", details, site_id)
      
    diff=abs(glong - longit)
    if (diff > tolerance ):
        details = "Longitude for %s is %s but should be %s." %(location, longit, glong)
        log.debug(error_messages["site.coordinates.incorrect_longitude"][0]+details)
        my_errors.log(site_id, "site.coordinates.incorrect_longitude", details, site_id)
      
def check_valid_url(site):
   site_id= site["GlueSiteUniqueID"]
   try:
      if site.has_key("GlueSiteWeb"):
            url=site["GlueSiteWeb"][0]
            url = url.replace('http://','')
            index = url.find("/")
            if ( index != -1):
                  url = url[0:index]
            socket.gethostbyname(url)
   
   except Exception, e:
      details = "Site: %s." %(site_id)
      log.debug(error_messages["site.URL.incorrect"][0]+details)
      my_errors.log(site_id, "site.URL.incorrect", details, site_id)
      
      
def check_site_other_info(site):
   site_id= site["GlueSiteUniqueID"]
   error_found=False
   
   
   ROC_names = ['AP', 'FR', 'CERN','CE','DE', 'Italy', 'NE', 'North', 'Russia', 'SEE', 'SWE', 'UK/I']
   SERVICE_names = ["prod", "pps", "cert"]

   #try:
   if site.has_key("GlueSiteOtherInfo"):
      
      try:
         # All information must be in the format FIELD=VALUE
         other_info = make_dict(site["GlueSiteOtherInfo"])
         
         # GRID= X must be present
         if not other_info.has_key("GRID"):
            details = "Site: %s." %(site_id)
            log.debug(error_messages["site.OhterInfo.no_GRID_info"][0]+details)
            my_errors.log(site_id, "site.OhterInfo.no_GRID_info", details, site_id)
            error_found = True
         else:
            # If GRID=EGEE, verify that there are ROC and SERVICE fields
            if ("EGEE" in other_info["GRID"]):
            
               if not ((other_info.has_key("EGEE_ROC")) and (other_info.has_key("EGEE_SERVICE"))):
                  details = "EGEE Site: %s." %(site_id)
                  log.debug(error_messages["site.OhterInfo.no_complete_EGEE_info"][0]+details)
                  my_errors.log(site_id, "site.OhterInfo.no_complete_EGEE_info", details, site_id)
                  error_found = True
               else:                           
                  # IF there is ROC field, the value must be in the list
                  if not (other_info["EGEE_ROC"] in ROC_names):
                     details = "Site: %s." %(site_id)
                     log.debug(error_messages["site.OhterInfo.incorrect_EGEE_ROC"][0]+details)
                     my_errors.log(site_id, "site.OhterInfo.incorrect_EGEE_ROC", details, site_id)
                     error_found = True
                  
                  # If there is SERVICE field, the value must be prod, pps or cert
                  if not (other_info["EGEE_SERVICE"] in SERVICE_names):
                     details = "Site: %s." %(site_id)
                     log.debug(error_messages["site.OhterInfo.incorrect_EGEE_SERVICE"][0]+details)
                     my_errors.log(site_id, "site.OhterInfo.incorrect_EGEE_SERVICE", details, site_id)
                     error_found = True

            if (tiers.has_key(site_id[0])):
                if (other_info.has_key("WLCG_TIER")):
                    for key in ['WLCG_PARENT', 'WLCG_NAME', 'WLCG_NAMEICON']:
                        if (other_info.has_key(key)):
                            details = "%s is not a teir %s but is no publising the attribute %s" %(site_id[0], tiers[site_id[0]], key)
                            my_errors.log(site_id[0], "site.OhterInfo.missing_WLCG", details, site_id[0])
                            error_found = True
                    if( not tiers[site_id[0]] == other_info['WLCG_TIER']):
                        details = "%s is a tier %s but is publising %s" %(site_id[0], tiers[site_id[0]], other_info['WLCG_TIER'])
                        my_errors.log(site_id[0], "site.OhterInfo.missing_WLCG", details, site_id[0])
                        error_found = True
                else:
                    details = "%s is not publising that it is an official WLCG Tier" %(site_id[0])
                    my_errors.log(site_id[0], "site.OhterInfo.missing_WLCG", details, site_id[0])
                    error_found = True
            else:
                if (other_info.has_key("WLCG_TIER")):
                    details = "%s is not not an official WLCG Tier!" %(site_id[0])
                    my_errors.log(site_id[0], "site.OhterInfo.missing_WLCG", details, site_id[0])
                    error_found = True
   
         if not error_found:
            log.info("The format of the information in GlueSiteOtherInfo fields is correct in site: %s" %(site_id[0]))            
            
      except GlueIncorrectFormat, field:
         details = "Site: %s." %(site_id[0])
         log.debug(error_messages["site.OhterInfo.incorrect_format"][0]+details)
         my_errors.log(site_id[0], "site.OhterInfo.incorrect_format", details, site_id[0])
                 
if __name__ == "__main__":

   #ldif = gstat.read_ldif("lcg-bdii.cern.ch", 2170, "o=grid")

   global my_errors
   global log
   global s

   #s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   mail_servers = {}
   config = gsutils.parse_options()

   log = logging.getLogger('glite-validate-example')
   hdlr = logging.StreamHandler(sys.stderr)
   formatter = logging.Formatter('[%(levelname)s]: %(message)s')
   hdlr.setFormatter(formatter)
   log.addHandler(hdlr)
   log.setLevel(config['debug'])

   # Initialize error logger.
   my_errors=gsutils.error_logger('gstat-validate-site',error_messages)

   locations = {}
   cache_file = "/usr/share/gstat/locations"
   log.debug("trying to open cache file")
   if ( os.path.exists(cache_file)):
      for line in open(cache_file).readlines():
            index = line.find("=")
            locations[line[:index]] = line[index + 1:]

   tiers = {}
   tier_file = "/usr/share/gstat/wlcg-tier"
   log.debug("trying to open wlcg-tier file")
   if ( os.path.exists(tier_file)):
      for line in open(tier_file).readlines():
            index = line.find(":")
            tiers[line[:index]] = line[index + 1:]

   # Set filter to reduced the amount of information
   filter = "'(objectclass=GlueSite)'"

   if config.has_key('file'):
      source = "file://%s" % (config['file'])
   if config.has_key('host'):
      source = "ldap://%s:%s/%s?filter=%s" % (config['host'], config['port'], config['bind'], filter)
   
   ldif = gsutils.fast_read_ldif(source)
   dns_dict = gsutils.get_dns(ldif)
   log.info("Found %s entries" %(len(dns_dict)) )

   cont = 0
   
   # Itterate through LDIF entries and test.
   
   for dn in dns_dict:
      entry = ldif[dns_dict[dn][0]:dns_dict[dn][1]].strip()
      entry = gsutils.convert_entry(entry)
      for object_class in entry['objectClass']:
         cont = cont +1
         
         if ( object_class == "GlueSite" ):

            # Test that every mandatory attribute is present. (Not null)
            check_mandatory_attributes(entry)
      
            # Test that each attribute has a value. (Not null)
            check_atributes_have_value(entry)
            
            # Check that SiteUniqueID = SiteName
            check_ID_equals_name(entry)
                        
            # Check that email contacts have the correct syntax
            check_valid_mail_address(entry, mail_servers)
            
            # Compare Location, Latitude and Longitue with Google.
            check_coordinates(entry)
            
            # Check that the Web URL really exists by connecting and reading the webpage.
            check_valid_url(entry)
   
            # Check that the info in the GlueSiteOtherInfo field is correct
            check_site_other_info(entry)
   gsutils.do_output(my_errors,config)   
   gsutils.do_exit(my_errors)   
   
