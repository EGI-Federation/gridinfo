#!/usr/bin/python

import os
import sys
import urllib2
import logging
import gsutils
import xml.sax.handler

# Define the errors
error_messages= {
   "connection.error":      ["Connection Error","ERROR"],
   "service.attribute.missing": ["The GlueService object is missing an attribute","ERROR"],
   "service.attribute.syntax": ["GlueService object attribute syntax error","ERROR"],
   "service.published": ["The Service is not published.","ERROR"],
   "service.registered": ["The Service is not registered in the GOC","ERROR"],
   "service.type.value": ["The Service Type is not an official type.","WARNING"],
   }

#Define the service types
service_types = { 'org.glite.wms.WMProxy' : 'WMS', 'SRM' : 'SRM', 'CE': 'CE', 'org.glite.ce.CREAM' : 'CE' }
goc_service_types = { 'WMS' : 'org.glite.wms.WMProxy', 'SRM' : 'SRM', 'CE' : 'CE', 'CREAM-CE' : 'CE'}
   
# Create and XML parser for the GOC DB
class GOCHandler(xml.sax.handler.ContentHandler):
   def __init__(self):
      self.inType = 0
      self.inHost = 0
      self.inProduction = 0
      self.inMonitored = 0
      self.mapping = {}
      self.not_production = {}
      self.not_monitored = {}
      
   def startElement(self, name, attributes):
      if name == "HOSTNAME":
         self.host_buffer = ""
         self.inHost = 1
      elif name == "SERVICE_TYPE":
         self.type_buffer = ""
         self.inType = 1
      elif name == "IN_PRODUCTION":
         self.production_buffer = ""
         self.inProduction = 1
      elif name == "NODE_MONITORED":
         self.monitored_buffer = ""
         self.inMonitored = 1
         
   def characters(self, data):
      if self.inHost:
         self.host_buffer += data
      if self.inType:
         if data == "CREAM-CE":
            self.type_buffer += "CE"
         else:
            self.type_buffer += data
      if self.inProduction:
         self.production_buffer += data
      if self.inMonitored:
         self.monitored_buffer += data
         
   def endElement(self, name):
      if name == "HOSTNAME":
         self.inHost = 0
      elif name == "SERVICE_TYPE":
         self.inType = 0
      elif name == "SERVICE_ENDPOINT":
         if goc_service_types.has_key(self.type_buffer):
            if (self.mapping.has_key(self.host_buffer) ):
               self.mapping[self.host_buffer].append(self.type_buffer)
            else:
               self.mapping[self.host_buffer] = [ self.type_buffer ]
      elif name == "IN_PRODUCTION":
         if goc_service_types.has_key(self.type_buffer):
            if self.production_buffer == "N":
               if self.host_buffer not in self.not_production:
                  self.not_production[self.host_buffer] = []
               self.not_production[self.host_buffer].append(self.type_buffer)
      elif name == "NODE_MONITORED":
         if goc_service_types.has_key(self.type_buffer):
            if self.monitored_buffer == "N":
               if self.host_buffer not in self.not_monitored:
                  self.not_monitored[self.host_buffer] = []
               self.not_monitored[self.host_buffer].append(self.type_buffer)

if __name__ == "__main__":

   global my_errors

   config = gsutils.parse_options()

   log = logging.getLogger('glite-validate-service-check')
   hdlr = logging.StreamHandler(sys.stderr)
   formatter = logging.Formatter('[%(levelname)s]: %(message)s')
   hdlr.setFormatter(formatter)
   log.addHandler(hdlr)
   log.setLevel(config['debug'])
                     
   # Initialize error logger.
   my_errors=gsutils.error_logger('gstat-validate-service-check',error_messages)

   official_service_types = {}
   service_types_file = "/var/lib/gstat/service-types"
   if ( os.path.exists(service_types_file)):
      for line in open(service_types_file).readlines():
         official_service_types[line.strip()] = None
            
   # Set filter to reduced the amount of information 
   filter = "'(|(objectclass=GlueService)(objectClass=GlueSite)(objectClass=GlueCE))'"

   if config.has_key('file'):
      source = "file://%s" % (config['file'])
   if config.has_key('host'):
      source = "ldap://%s:%s/%s?filter=%s" % (config['host'], config['port'], config['bind'], filter)

   ldif = gsutils.fast_read_ldif(source)
   dns = gsutils.get_dns(ldif)
   log.info("Found %s entries" %(len(dns)) )

   sites = []
   services = {}
   # Iterate through LDIF entries and test.
   for dn in dns:
      entry = ldif[dns[dn][0]:dns[dn][1]].strip()
      entry = gsutils.convert_entry(entry)
      for object_class in entry['objectClass']:
         if ( object_class == "GlueCE" ):
            type = 'CE'
            attribute = 'GlueCEInfoHostName'
            try:
               host = entry[attribute][0]

               # Get Site Name
               site = gsutils.get_site(dn)
               
               if services.has_key(site):
                  if services[site].has_key(host):
                     services[site][host].append(service_types[type])
                  else:
                     services[site][host] = [ service_types[type] ]
               else:
                  services[site] = { host : [ service_types[type] ] }
            except KeyError, e:
               my_errors.log(gsutils.get_unique_id(dn),'service.attribute.missing', 'The GlueCluster entry is missing the attribute, %s' %(attribute), gsutils.get_site(dn))

         if ( object_class == "GlueService" ):
            
            # Get Service Type
            type = None
            try:
               attribute= 'GlueServiceType'
               type = entry[attribute][0]
               if ( not official_service_types.has_key(type) ):
                  my_errors.log(gsutils.get_unique_id(dn),'service.type.value', 'The GlueServiceType %s is not an official type.' %(type), gsutils.get_site(dn))

               if ( service_types.has_key(type)):

                  # Get Hostname
                  host = None
                  attribute = 'GlueServiceUniqueID'
                  host = entry[attribute][0]
                  index = host.find("_")
                  if (index > -1 ):
                     host = host[:index]
                  index = host.find("//")
                  if (index > -1 ):
                     host = host[index+2:]
                  index = host.find(":")
                  if (index > -1 ):
                     host = host[:index]

                  attribute= 'GlueForeignKey'
                  FKs = entry[attribute]
                  site = None
                  for FK in FKs:
                     try:
                        index = FK.index('=')
                        key = FK[:index]
                        value = FK[index+1:]
                        if ( key == 'GlueSiteUniqueID'):
                           site = value.lower()
                     except ValueError:
                        my_errors.log(gsutils.get_unique_id(dn),
                                      'service.attribute.syntax',
                                      'The GlueService entry %s attribute has a syntax error, expect key=value syntax' %(attribute),
gsutils.get_site(dn))
                     if ( site == None ):
                        my_errors.log(gsutils.get_unique_id(dn),'service.attribute.missing', 'The GlueService entry is missing the attribute, %s' %(attribute), gsutils.get_site(dn))
                        site = gsutils.get_site(dn)
                  if services.has_key(site):
                     if services[site].has_key(host):
                        services[site][host].append(service_types[type])
                     else:
                        services[site][host] = [ service_types[type] ]
                  else:
                     services[site] = { host : [ service_types[type] ] }
            except KeyError, e:
               my_errors.log(gsutils.get_unique_id(dn),'service.attribute.missing', 'The GlueService entry is missing the attribute, %s' %(attribute), gsutils.get_site(dn))

         if ( object_class == "GlueSite" ): 
            try:
               site = entry['GlueSiteName'][0]
               try:
                  sites.index(site)
               except:
                  sites.append(site)
            except KeyError, e:
               my_errors.log(gsutils.get_unique_id(dn),'service.attribute.missing', 'The GlueService entry is missing the attribute, %s' %(attribute), gsutils.get_site(dn))

          
   url = "https://goc.egi.eu/gocdbpi/public/?method=get_service_endpoint&sitename="
   goc_services = {}
   goc_not_production = {}
   goc_not_monitored = {}
   for site in sites:
      parser = xml.sax.make_parser(  )
      handler = GOCHandler( )
      parser.setContentHandler(handler)
      parser.parse(urllib2.urlopen(url + site))
      goc_services[site.lower()] = handler.mapping
      goc_not_production[site.lower()] = handler.not_production
      goc_not_monitored[site.lower()] = handler.not_monitored
         
# Check to see if Services are published
for site in services.keys():
   if goc_services.has_key(site):
      for host in goc_services[site].keys():
         for service in goc_services[site][host]:
            try:
               services[site][host].index(service)
            except:
               try:
                  # should not check if service is published when it is marked as not production and not not monitored.
                  goc_not_production[site][host].index(service)
                  goc_not_monitored[site][host].index(service)
               except:
                  my_errors.log(host, 'service.published', 'The Service %s on %s is registered in the GOC but not published.' %(service, host), site)

# Check to see if Services are registered
for site in goc_services.keys():
   if services.has_key(site):
      for host in services[site].keys():
         for service in services[site][host]:
            try:
               goc_services[site][host].index(service)
            except:
               my_errors.log(service + "_" + host,'service.published', 'The Service %s on %s is not registered in the GOC DB.' %(service, host), site)

if (len(dns) == 0 ):
   details = "No results returned."
   my_errors.log(config['bind'], "connection.error", details, 'Unknown')

gsutils.do_output(my_errors,config)   
gsutils.do_exit(my_errors)   
            
