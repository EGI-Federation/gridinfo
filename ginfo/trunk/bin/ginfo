#!/usr/bin/env python
"""Ginfo - Developped by Ivan Calvet for CERN - ivan.calvet@cern.ch"""

import ldap
import sys
import getopt
import json
import os
import re

VERSION = '0.1.2'

# configuration dictionnary that will be filled with the submitted options
CONF = {}

# long_option: [short_option, parameter_needed]
OPTIONS = {
    'host': [None, True],
    'list': ["l", True],
    'clean': [None, False],
    'strict': ["s", False],
    'csv': ["c", False],
    'json': ["j", False],
    'emi': ["e", False],
    'verbose': ["v", False],
    'version': ["V", False],
    'help': ["h", False],
    'cap': [None, True],
    'domain': ["d", True],
    'id': ["i", True],
    'imp': ["m", True],
    'impv': [None, True],
    'int': ["n", True],
    'intv': [None, True],
    'ql': ["q", True],
    'type': ["t", True],
    'url': ["u", True],
    'vo': [None, True],
    }

# ldap request attribute: [prefix_object, object_class, key, output_list]
ATTRIBUTES = {
    'cap': ['', 'Endpoint', 'Capability', True],
    'domain': ['', 'Service', 'AdminDomainForeignKey', False],
    'id': ['', 'Service', 'ID', False],
    'imp': ['', 'Endpoint', 'ImplementationName', False],
    'impv': ['', 'Endpoint', 'ImplementationVersion', False],
    'int': ['', 'Endpoint', 'InterfaceName', False],
    'intv': ['', 'Endpoint', 'InterfaceVersion', False],
    'ql': ['', 'Endpoint', 'QualityLevel', False],
    'type': ['', 'Service', 'Type', False],
    'url': ['', 'Endpoint', 'URL', False],
    'vo': ['Access', 'Policy', 'Rule', True],
    }
# keys that link ldap objects to Endpoint object [objectKey, EndpointKey]
OBJECT_KEY = {'Service': ['ID', 'EndpointServiceForeignKey'], 'AccessPolicy': ['EndpointForeignKey', 'EndpointID']}

def main(argv):
    """Main function that launches the other functions""" 

    if 'LCG_GFAL_INFOSYS' in os.environ:
        CONF['host'] = os.environ['LCG_GFAL_INFOSYS']
    parse_options(argv)
    validate_conf()
    if 'list' in CONF:
        result = list_attr() # option --list
    else:
        result = list_services() # get all the informations about services
    result = clean(result)
    print serialize_output(result)
    sys.exit()

def parse_options(argv):
    """Parse the selected options and put them in a config dictionnary""" 

    # parse the options
    short_options = ''
    long_options = []
    long_options_bis = [] # options without any short option
    for i in OPTIONS:
        if OPTIONS[i][0]:
            short_options += OPTIONS[i][0]
            long_options.append(i)
            if OPTIONS[i][1]:
                short_options += ':'
                long_options[-1] += '='
        else:
            long_options_bis.append(i)
            if OPTIONS[i][1]:
                long_options_bis[-1] += '='
    long_options.extend(long_options_bis)
    try:
        opts, args = getopt.getopt(argv, short_options, long_options)
    except getopt.error as err:
        if err.opt in ("l", "list"):
            sys.exit(list_usage())
        else:
            sys.exit(usage())

    # put the options in the config dictionnary
    for opt, arg in opts:
        opt = opt[opt.rfind('-')+1:]
        for i in OPTIONS:
            if opt in (i, OPTIONS[i][0]):
                if OPTIONS[i][1]:
                    CONF[i] = arg
                else:
                    CONF[i] = True
                break 

    # put the arguments in the config dictionnary
    CONF['args'] = args
    if len(args) == 0:
        CONF['args'] = ATTRIBUTES.keys() # all by default

def validate_conf():
    """Prints verbose messages and checks for errors""" 
        
    # options
    if 'help' in CONF:
        print usage()
        sys.exit()
    if 'version' in CONF:
        print os.path.basename(sys.argv[0]) +' V'+VERSION
        sys.exit()
    if all(i in CONF for i in ['csv', 'json', 'emi']):
        sys.exit('Error: choose between csv, json and emi.')
    elif 'csv' in CONF and 'json' in CONF:
        sys.exit('Error: choose between csv and json.')
    elif 'csv' in CONF and 'emi' in CONF:
        sys.exit('Error: choose between csv and emi.')
    elif 'emi' in CONF and 'json' in CONF:
        sys.exit('Error: choose between json and emi.')
    elif 'csv' in CONF:
        if 'verbose' in CONF:
            print 'Output in csv formating'
    elif 'json' in CONF:
        if 'verbose' in CONF:
            print 'Output in json formating'
    elif 'emi' in CONF:
        CONF['args'] = ['url', 'type', 'domain', 'cap', 'int', 'intv', 'ql']
        if 'verbose' in CONF:
            print 'Output in emi formating'
    if 'host' in CONF:
        if 'verbose' in CONF:
            print 'The following host will be used:', CONF['host']
    else:
        sys.exit(usage())
    if 'list' in CONF:
        if CONF['list'] not in ATTRIBUTES.keys():
            for i in ATTRIBUTES:
                if ATTRIBUTES[i][1]+ATTRIBUTES[i][2] == CONF['list']:
                    CONF['list'] = i
                    break
            if CONF['list'] not in ATTRIBUTES.keys():
                sys.exit('Error: '+CONF['list']+' wrong attribute.')
        if 'verbose' in CONF:
            print 'Lists all the possible values for the following attribute:', CONF['list']
    if 'clean' in CONF and 'strict' in CONF:
        sys.exit('Error: choose between clean and strict.')
    elif 'clean' in CONF:
        if 'verbose' in CONF:
            print 'Results have been cleaned.'
    elif 'strict' in CONF:
        if 'verbose' in CONF:
            print 'Results have been cleaned strictly.'

    # attributes
    for i in ATTRIBUTES.keys():
        if i in CONF:
            if 'verbose' in CONF:
                print 'Filter services by the following '+i+':', CONF[i]
    
    # arguments
    if 'args' in CONF:
        for arg in CONF['args']:
            if arg not in ATTRIBUTES.keys():
                cpt = len(CONF['args'])
                CONF['args'].remove(arg)
                for i in ATTRIBUTES:
                    if ATTRIBUTES[i][1]+ATTRIBUTES[i][2] == arg:
                        CONF['args'].append(i)
                        break
                if len(CONF['args']) < cpt:
                    sys.exit('Error: '+arg+' is a wrong attribute.')
        CONF['args'] = list(set(CONF['args'])) # delete duplicated values
        if 'verbose' in CONF:
            print 'The following attributes will be displayed:', ' '.join(CONF['args'])
    if 'verbose' in CONF:
        print 'Verbose mode enabled\n'

def usage():
    """Returns the usage message""" 
    
    return '''Usage: ginfo [options] [attributes]

    List URLs of services along with other optional attributes.

        --host      host        Specify a host to query. By default the
                                environmental variable LCG_GFAL_INFOSYS will be
                                used.
    -l, --list      attribute   List all the possible values of the specified
                                attribute.
        --clean                 Clean results in replacing all invalid data.
    -s, --strict                Clean strictly results in replacing all invalid
                                data.
    -c, --csv                   Output in CSV format
    -j, --json                  Output in JSON format
    -v, --verbose               Enable verbose mode
    -V, --version               Prints the version of ginfo
    -h, --help                  Prints this helpful message

    Available attributes are:

        cap       EndpointCapability
        domain    ServiceAdminDomainForeignKey
        id        ServiceID
        imp       EndpointImplementationName
        impv      EndpointImplementationVersion
        int       EndpointInterfaceName
        intv      EndpointInterfaceVersion
        ql        EndpointQualityLevel
        type      ServiceType
        url       EndpointURL
        vo        PolicyRule

    Addition options to filter services by the specified attribute:

        --cap       EndpointCapability
    -d, --domain    ServiceAdminDomainForeignKey
    -i, --id        ServiceID
    -m, --imp       EndpointImplementationName
        --impv      EndpointImplementationVersion
    -n, --int       EndpointInterfaceName
        --intv      EndpointInterfaceVersion
    -q, --ql        EndpointQualityLevel
    -t, --type      ServiceType
    -u, --url       EndpointURL
        --vo        PolicyRule'''

def list_usage():
    """Returns the usage message for list option"""

    return '''Available attributes are:

        cap       EndpointCapability
        domain    ServiceAdminDomainForeignKey
        id        ServiceID
        imp       EndpointImplementationName
        impv      EndpointImplementationVersion
        int       EndpointInterfaceName
        intv      EndpointInterfaceVersion
        ql        EndpointQualityLevel
        type      ServiceType
        url       EndpointURL
        vo        PolicyRule'''

def request(ldap_filter=None):
    """Returns the result of the ldap request with the filter given"""   
    try:
        port = ''
        if ':' not in CONF['host']:
            port = ':2170'
        con = ldap.initialize('ldap://'+CONF['host']+port)
        if ldap_filter != None:
            result = con.result(con.search('o=glue', ldap.SCOPE_SUBTREE, ldap_filter))
        else:
            result = con.result(con.search('o=glue', ldap.SCOPE_SUBTREE))
    except ldap.SERVER_DOWN:
        sys.exit('Error: Can\'t contact the LDAP server. Please check your host.')
    return result[1]

def list_services():
    """Returns a dictionary of filtered results from a ldap request""" 
    ldap_filter = {'Endpoint': ''}
    result = {}
    selection_list = {}

    # Generate the filters 
    for i in ATTRIBUTES:
        at1 = ATTRIBUTES[i][0]+ATTRIBUTES[i][1]
        at2 = ATTRIBUTES[i][1]+ATTRIBUTES[i][2]
        if i in CONF:
            if at1 not in ldap_filter:
                ldap_filter[at1] = ''
            tmp_filter = '(GLUE2'+at2+'='+CONF[i]+')'
            if at2 == 'PolicyRule':
                tmp_filter = '(|(GLUE2PolicyRule=ALL)'+tmp_filter+')'
            ldap_filter[at1] += tmp_filter
    # Execute the filtered ldap requests and put results in a list
    for i in OBJECT_KEY.keys():
        if i in ldap_filter:
            result[i] = request('(&(objectClass=GLUE2'+i+')'+ldap_filter[i]+')')
            selection_list[i] = []
            for res in result[i]:
                selection_list[i].append(res[1]['GLUE2'+i+OBJECT_KEY[i][0]][0])
    
    # Main loop using Endpoint object
    result['Endpoint'] = request('(&(objectClass=GLUE2Endpoint)'+ldap_filter['Endpoint']+')')
    dic = {} # Final results
    dic2 = {} # Tmp results
    for res in result['Endpoint']:
        ids = {}
        for i in OBJECT_KEY:
            ids[i] = res[1]['GLUE2'+OBJECT_KEY[i][1]][0]
        # Executes the filtering by other objects
        stop = False
        for i in OBJECT_KEY.keys():
            if i in selection_list and ids[i] not in selection_list[i]:
                    stop = True
                    break
        if stop:
            continue
        # Fill in the final results dictionnary
        dic[ids['Service']] = {}
        for attr in CONF['args']:
            at1 = ATTRIBUTES[attr][0]+ATTRIBUTES[attr][1]
            at2 = ATTRIBUTES[attr][1]+ATTRIBUTES[attr][2]
            dic[ids['Service']][attr] = None 
            if attr in CONF and not ATTRIBUTES[attr][3]:
                dic[ids['Service']][attr] = CONF[attr]
            else:
                if at1 == 'Endpoint':
                    if 'GLUE2'+at2 in res[1]:
                        dic[ids['Service']][attr] = res[1]['GLUE2'+at2]
                        if not ATTRIBUTES[attr][3]:
                            dic[ids['Service']][attr] = dic[ids['Service']][attr][0]
                else:
                    if at1 not in result:
                        result[at1] = request('(objectClass=GLUE2'+at1+')')
                    if attr not in dic2:
                        dic2[attr] = {}
                        for res in result[at1]:
                            if 'GLUE2'+at2 in res[1]:
                                dic2[attr][res[1]['GLUE2'+at1+OBJECT_KEY[at1][0]][0]] = res[1]['GLUE2'+at2]
                            else:
                                dic2[attr][res[1]['GLUE2'+at1+OBJECT_KEY[at1][0]][0]] = None
                    if ids[at1] in dic2[attr]:
                        dic[ids['Service']][attr] = dic2[attr][ids[at1]]
                        if not ATTRIBUTES[attr][3] and dic[ids['Service']][attr]:
                            dic[ids['Service']][attr] = dic[ids['Service']][attr][0]
    if len(dic) == 0 and 'verbose' in CONF:
        sys.exit('Error: No result. Verify search parameters.')
    return dic

def list_attr():
    """Returns a list of values for a given attribute""" 
    
    object_class = ATTRIBUTES[CONF['list']][0]+ATTRIBUTES[CONF['list']][1]
    key = ATTRIBUTES[CONF['list']][1]+ATTRIBUTES[CONF['list']][2]
    result = request('objectClass=GLUE2'+object_class)
    attr_list = []
    for res in result:
        if 'GLUE2'+key in res[1]:
            if res[1]['GLUE2'+key][0] not in attr_list:
                attr_list.append(res[1]['GLUE2'+key][0])
        else:
            if 'None' not in attr_list:
                attr_list.append('None')
    attr_list.sort()
    return attr_list

def clean(result):
    """Clean all the results"""
    values = {
        'ql': [
            'development',
            'pre-production',
            'production',
            'testing'
            ],
        'cap': [
            'data.access.flatfiles',
            'data.access.relational',
            'data.access.xml',
            'data.management.replica',
            'data.management.storage',
            'data.management.transfer',
            'data.naming.resolver',
            'data.naming.scheme',
            'data.transfer',
            'executionmanagement.candidatesetgenerator',
            'executionmanagement.dynamicvmdeploy',
            'executionmanagement.executionandplanning',
            'executionmanagement.jobdescription',
            'executionmanagement.jobexecution',
            'executionmanagement.jobmanager',
            'executionmanagement.reservation',
            'information.discovery',
            'information.logging',
            'information.model',
            'information.monitoring',
            'information.provenance',
            'security.accounting',
            'security.attributeauthority',
            'security.authentication',
            'security.authorization',
            'security.credentialstorage',
            'security.delegation',
            'security.identymapping'
        ],
        'int': [
           'MyProxy',
           'SRM',
           'VOBOX',
           'bdii_site',
           'bdii_top',
           'dcap',
           'emi.storm',
           'gsidcap',
           'gsiftp',
           'http',
           'https',
           'lcg-file-catalog',
           'lcg-local-file-catalog',
           'org.glite.ChannelManagement',
           'org.glite.Delegation',
           'org.glite.FileTransfer',
           'org.glite.RTEPublisher',
           'org.glite.ce.ApplicationPublisher',
           'org.glite.ce.CREAM',
           'org.glite.ce.Monitor',
           'org.glite.lb.Server',
           'org.glite.voms',
           'org.glite.voms-admin',
           'org.glite.wms.WMProxy',
           'org.globus.gram',
           'org.nordugrid.gridftpjob',
           'org.nordugrid.ldapglue1',
           'org.nordugrid.ldapglue2',
           'org.nordugrid.ldapng',
           'xroot'
        ],
        'type': [
            'org.dcache.storage',
            'org.glite.wms.WMProxy',
            'org.glite.lb.Server',
            'org.glite.ce.ApplicationPublisher',
            'org.glite.ce.CREAM',
            'org.glite.ce.Monitor',
            'org.glite.rgma.Consumer',
            'org.glite.rgma.Registry',
            'org.glite.rgma.Schema',
            'org.glite.rgma.Browser',
            'org.glite.rgma.PrimaryProducer',
            'org.glite.rgma.SecondaryProducer',
            'org.glite.rgma.OnDemandProducer',
            'org.glite.RTEPublisher',
            'org.glite.voms',
            'org.glite.voms-admin',
            'org.glite.AMGA',
            'org.glite.ChannelManagement',
            'org.glite.FileTransfer',
            'org.glite.FileTransferStats',
            'org.glite.ChannelAgent',
            'org.glite.Delegation',
            'org.glite.KeyStore',
            'org.nordugrid.execution.arex',
            'SRM',
            'gsiftp',
            'org.edg.gatekeeper',
            'it.infn.GridICE',
            'MyProxy',
            'GUMS',
            'gridmap-file',
            'GridCat',
            'edu.caltech.cacr.monalisa',
            'OpenSSH',
            'xroot',
            'BDII',
            'bdii_site',
            'bdii_top',
            'VOBOX',
            'msg.broker.rest',
            'msg.broker.stomp',
            'msg.broker.stomp-ssl',
            'msg.broker.openwire',
            'msg.broker.openwire-ssl',
            'org.lcg.Frontier',
            'org.lcg.Squid',
            'Nagios',
            'National-NAGIOS',
            'Project-NAGIOS',
            'Regional-NAGIOS',
            'data-location-interface',
            'local-data-location-interface',
            'lcg-file-catalog',
            'lcg-local-file-catalog',
            'pbs.torque.server',
            'pbs.torque.maui',
            'other'
        ],
    }
    
    if 'list' in CONF and 'vo' in CONF['list']:
        invalid_list = []
        for i in result:
            # policyRule must begin with VO:
            if not re.match('^VO:',i) and i != 'ALL' and i not in invalid_list:
                invalid_list.append(i)
        for i in invalid_list:
            result.remove(i)
        if invalid_list:
            result.append('INVALID')
    elif 'list' not in CONF:
        for i in result:
            # policyRule must begin with VO:
            if 'vo' in result[i]:
                if result[i]['vo'] != None:
                    for k in range(len(result[i]['vo'])):
                        if not re.match('^VO:',result[i]['vo'][k]) and result[i]['vo'][k] != 'ALL':
                            result[i]['vo'][k] = 'INVALID'

    if 'clean' in CONF or 'strict' in CONF:
        if 'list' in CONF:
            invalid_list = []
            for i in result:
                # all elements which contain spaces or are empty
                if not i or i == 'None' or i.find(' ') >= 0:
                    invalid_list.append(i)
                # version should contain a number
                if CONF['list'] in ['intv', 'impv']:
                    if not re.match('^.*[0-9]+', i) and i not in invalid_list:
                        invalid_list.append(i)
                # quality level is restricted
                if CONF['list'] == 'ql':
                    if i not in values['ql'] and i not in invalid_list:
                        invalid_list.append(i)
                # url must be correctly formated
                if CONF['list'] == 'url':
                    if not re.match('(?:(?:([a-z0-9+.-]+)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9\&amp;%_\./-~-]*)?',i) and i not in invalid_list:
                        invalid_list.append(i)
                if 'strict' in CONF:
                    # "j" is restricted
                    for j in ['cap', 'type', 'int']:
                        if CONF['list'] == j:
                            if i not in values[ATTRIBUTES[j][1]+ATTRIBUTES[j][2]] and i not in invalid_list:
                                invalid_list.append(i)
            for i in invalid_list:
                result.remove(i)
            if invalid_list:
                result.append('INVALID')            
        else:
            for i in result:
                # all elements which contain spaces or are empty
                for j in result[i]:
                        if j in ['cap', 'vo']:
                            if result[i][j]:
                                for k in range(len(result[i][j])):
                                    if not result[i][j][k] or result[i][j][k].find(' ') >= 0:
                                        result[i][j][k] = 'INVALID'
                                continue
                            else:
                                result[i][j] = ['INVALID']
                        elif not result[i][j] or result[i][j].find(' ') >= 0:
                            result[i][j] = 'INVALID'
                # version should contain a number
                for j in ['intv', 'impv']:
                    if j in result[i]:
                        if not re.match('^.*[0-9]+', result[i][j]):
                            result[i][j] = 'INVALID'
                # quality level is restricted
                if 'ql' in result[i]:
                    if result[i]['ql'] not in values['ql']:
                        result[i]['ql'] = 'INVALID'
                # url must be correctly formated
                if 'url' in result[i]:
                   if not re.match('(?:(?:([a-z0-9+.-]+)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9\&amp;%_\./-~-]*)?',result[i]['url']):
                       result[i]['url'] = 'INVALID'
                if 'strict' in CONF:
                    if 'cap' in result[i]:
                        for k in range(len(result[i]['cap'])):
                            if result[i]['cap'][k] not in values['cap'] and result[i]['cap'][k]!='INVALID':
                                result[i]['cap'][k] = 'INVALID'
                    for j in ['type', 'int']:
                        # "j" is restricted
                        if j in result[i]:
                            if result[i][j] not in values[j] and result[i][j]!='INVALID':
                                result[i][j] = 'INVALID'

    #Renaming of attributes
    result2 = {}
    for i in result:
        result2[i] = {}
        for j in result[i]:
            result2[i][ATTRIBUTES[j][1]+ATTRIBUTES[j][2]] = result[i][j]
    return result2

def serialize_output(result):
    """Return the output with the wished format""" 

    if 'list' in CONF:
        output = '\n'.join(result)
    elif 'csv' in CONF:
        csv_list = []
        for i in result:
            tmp_list = []
            for j in CONF['args']:
                att = ATTRIBUTES[j][1]+ATTRIBUTES[j][2]
                if result[i][att] == None:
                    tmp_list.append('None')
                elif ATTRIBUTES[j][3]:
                    tmp_list.append('"'+','.join(result[i][att])+'"')
                else:
                    tmp_list.append(result[i][att])
            csv_list.append(','.join(tmp_list))
        output = '\n'.join(csv_list)
    elif 'json' in CONF:
        output = json.dumps(result)
    elif 'emi' in CONF:
        emi_list = []
        for i in result:
            dic_tmp = {
                "Service_Type": result[i]['ServiceType'],
                "Service_Admin_Domain": result[i]['ServiceAdminDomainForeignKey'],
                "Service_Endpoint_URL": result[i]['EndpointURL'],
                "Endpoint_Capability": result[i]['EndpointCapability'],
                "Endpoint_Interface_Name": result[i]['EndpointInterfaceName'],
                "Endpoint_Interface_Version":
                result[i]['EndpointInterfaceVersion'],
                "Endpoint_Quality_Level": result[i]['EndpointQualityLevel']
                }
            emi_list.append(json.dumps(dic_tmp))
        output = '['+', '.join(emi_list)+']'
    else:
        entry_list = []
        for i in result:
            for j in CONF['args']:
                att = ATTRIBUTES[j][1]+ATTRIBUTES[j][2]
                if result[i][att] == None:
                    entry_list.append(att+': None')
                elif ATTRIBUTES[j][3]:
                    entry_list.append(att+': '+', '.join(result[i][att]))
                else:
                    entry_list.append(att+': '+result[i][att])
            entry_list.append('')
        output = '\n'.join(entry_list)
    return output

if __name__ == "__main__":
    main(sys.argv[1:])
