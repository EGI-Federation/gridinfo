from django.shortcuts import render_to_response
from core.utils import *
import urllib, urllib2
import libxml2, csv, os
#from sets import Set
from django.db import connection
from datetime import datetime

monthName = ['', 'January', 'February', 'March', 'April',
             'May', 'June', 'July', 'August', 'September',
             'October', 'November', 'December']

def index(request):
    data = getData()
    data['c5report_active'] = 1
    return render_to_response('c5report.html', data)


def viewText(request):
    data = getData()
    response = render_to_response('c5report.txt', data)
    response['Content-Type'] = 'text/plain'
    response['Content-Description'] = 'C5 Report generated by GStat 2.0'
    return response


def viewXml(request):
    data = getData()
    response = render_to_response('c5report.xml', data)
    response['Content-Type'] = 'application/xml'
    response['Content-Description'] = 'C5 Report generated by GStat 2.0'
    return response


def prettyPrintNumber(number):
    len_number = len(number)
    key = 9; value = 'B';
    if len_number > key:
        return number[0:len_number-key] + '.' + number[len_number-key:len_number-key+1] + value
    key = 6; value = 'M';
    if len_number > key:
        return number[0:len_number-key] + '.' + number[len_number-key:len_number-key+1] + value
    key = 3; value = 'K';
    if len_number > key:
        return number[0:len_number-key] + '.' + number[len_number-key:len_number-key+1] + value
    return number


def getJobsPerMonth(startMonth, startYear, endMonth, endYear):
    urlquery = 'http://www3.egee.cesga.es/gridsite/accounting/CESGA/csv_export_extend.php'
    params = {'startYear'   : startYear,
              'startMonth'  : startMonth,
              'endYear'     : endYear,
              'endMonth'    : endMonth,
              'yrange'      : 'REGION',
              'xrange'      : 'VO',
              'option'      : 'REGION',
              'optval'      : '',
              'type'        : 'Production',
              'dteamVO'     : '0',
              'query'       : 'njobs',
              'voGroup'     : 'lhc',
              'dataGroup'   : 'Production',
              'newCateg'    : '0',
              'isextend'    : '0'}
    response = urllib2.urlopen(urlquery, urllib.urlencode(params)).read()
    rows = csv.reader(response.split(os.linesep), delimiter=',', quoting=False)

    # Skip initial comments
    for i in range(0,5):
        rows.next()

    # Get the total number of jobs
    for row in rows:
        if row[0] == 'Total':
            return row[5]

    return False


def getData():
    # Initialization
    # SAM DB API
    urlquery = 'http://lcg-sam.cern.ch:8080/reports/lcg_deployment_C5.xsql'
    response = urllib2.urlopen(urlquery).read()
    doc = libxml2.parseDoc(response)
    # Summary OSes
    #urlquery2 = 'http://horat.web.cern.ch/horat/summary-oses.xml'
    #response2 = urllib2.urlopen(urlquery2).read()
    #doc2 = libxml2.parseDoc(response2)
    # Sites in GStat 2.0
    site_list = get_sites('GRID', 'ALL')
    # Month names for easy access. E.g.: monthName[1] == 'January'
    monthName = ['', 'January', 'February', 'March', 'April', 
                 'May', 'June', 'July', 'August', 
                 'September', 'October', 'November', 'December']

    # 1.a Total number of Sites
    # Extracted from GStat 2.0 or SAM API
    # GStat 2.0 way: total_number_sites = len(site_list)
    total_number_sites = doc.xpathEval("/LCG_DEPLOYMENT/TOTAL_NUM_EGEE_SITES_CERT_PROD/VALUE/TOTAL_SITES")[0].content

    # 1.b Status (ok, degraded, down, maintenance, not available)
    # Extracted from SAM API
    # http://lcg-sam.cern.ch:8080/reports/lcg_deployment_C5.xsql
    sites_ok = doc.xpathEval("/LCG_DEPLOYMENT/TOTAL_EGEE_SITES_STATUS_CERT_PROD/VALUE[NAME='ok']/TOTAL")[0].content
    sites_degraded = doc.xpathEval("/LCG_DEPLOYMENT/TOTAL_EGEE_SITES_STATUS_CERT_PROD/VALUE[NAME='degraded']/TOTAL")[0].content
    sites_degraded += doc.xpathEval("/LCG_DEPLOYMENT/TOTAL_EGEE_SITES_STATUS_CERT_PROD/VALUE[NAME='degrated80']/TOTAL")[0].content
    sites_down = doc.xpathEval("/LCG_DEPLOYMENT/TOTAL_EGEE_SITES_STATUS_CERT_PROD/VALUE[NAME='down']/TOTAL")[0].content
    sites_maint = doc.xpathEval("/LCG_DEPLOYMENT/TOTAL_EGEE_SITES_STATUS_CERT_PROD/VALUE[NAME='maint']/TOTAL")[0].content
    sites_na = doc.xpathEval("/LCG_DEPLOYMENT/TOTAL_EGEE_SITES_STATUS_CERT_PROD/VALUE[NAME='na']/TOTAL")[0].content

    # 2. Numer of sites per software (glite 3.2 and glite 3.1)
    # Extracted from SAM API
    # http://lcg-sam.cern.ch:8080/reports/lcg_deployment_C5.xsql
    sites_glite32 = doc.xpathEval("/LCG_DEPLOYMENT/GLITE_VERSION_IN_SITES/VALUES[VERSION='3.2.0']/NUMBER_OF_SITES")[0].content
    sites_glite31 = doc.xpathEval("/LCG_DEPLOYMENT/GLITE_VERSION_IN_SITES/VALUES[VERSION='3.1.0']/NUMBER_OF_SITES")[0].content

    # 3.a Number of jobs executed last month
    # 3.b Number of jobs executed since the beginning of this month
    # Extracted from accounting portal: http://www3.egee.cesga.es/
    now = datetime.now()
    thisYear = now.year
    thisMonth = now.month
    jobs_this_month = getJobsPerMonth(thisMonth, thisYear, thisMonth, thisYear)
    jobs_this_month = prettyPrintNumber(jobs_this_month)
    jobs_this_month_monthName = monthName[thisMonth]
    jobs_this_month_monthNumber = thisMonth
    jobs_this_month_yearNumber = thisYear
    
    if thisMonth == 1:
        lastYear = thisYear - 1
        lastMonth = 12
    else:
        lastYear = thisYear
        lastMonth = thisMonth - 1
    jobs_last_month = getJobsPerMonth(lastMonth, lastYear, lastMonth, lastYear)
    jobs_last_month = prettyPrintNumber(jobs_last_month)
    jobs_last_month_monthName = monthName[lastMonth]
    jobs_last_month_monthNumber = lastMonth
    jobs_last_month_yearNumber = lastYear

    # 4. Number of sites running CREAM CEs
    # Extracted from GStat 2.0
    # Could be checked with: ldapsearch -LLL -x -h lcg-bdii -p 2170 -b o=grid '(&(objectClass=GlueCE)(GlueCEImplementationName=CREAM))' GlueCEHostingCluster | grep GlueCEHostingCluster | sed 's/^[^\.]*\.//' | sort -u | wc -l
    # but this LDAP query is wrong, as they are counting domains as sites.
    # The Django way is slower:
    #cream_ces = gluece.objects.filter(implementationname = 'CREAM')
    #sites_cream_ces = []
    #for cream_ce in cream_ces:
    #    sites_cream_ces.append(gluecluster.objects.filter(uniqueid = cream_ce.gluecluster_fk).values('gluesite_fk')[0]['gluesite_fk'])
    #sites_cream_ces = len(Set(sites_cream_ces))
    cursor = connection.cursor()
    # This one includes also broken links, so I won't use it:
    #cursor.execute("SELECT COUNT(DISTINCT cluster.gluesite_fk) FROM glue_gluece ce, glue_gluecluster cluster WHERE ce.implementationname='CREAM' and ce.gluecluster_fk = cluster.uniqueid;")
    cursor.execute("SELECT COUNT(DISTINCT cluster.gluesite_fk) FROM glue_gluece ce, glue_gluecluster cluster, glue_gluesite site WHERE ce.implementationname='CREAM' and ce.gluecluster_fk = cluster.uniqueid and cluster.gluesite_fk = site.uniqueid;")
    sites_cream_ces = int(cursor.fetchall()[0][0])

    # 5. Number of CREAM CEs deployed
    # Extracted from GStat 2.0
    # Could be checked with: ldapsearch -LLL -x -h lcg-bdii -p 2170 -b o=grid '(&(objectClass=GlueCE)(GlueCEImplementationName=CREAM))' | grep 'dn: GlueCEUniqueID' | wc -l
    # The Django way is slower:
    #cream_ces_deployed = len(gluece.objects.filter(implementationname = 'CREAM'))
    cursor.execute("SELECT COUNT(*) FROM glue_gluece ce WHERE ce.implementationname='CREAM';")
    cream_ces_deployed = int(cursor.fetchall()[0][0])

    # 6. Number of LCG-CEs deployed
    # Extracted from GStat 2.0.
    # Could be checked with: ldapsearch -LLL -x -h lcg-bdii -p 2170 -b o=grid '(&(objectClass=GlueCE)(GlueCEImplementationName=LCG-CE))' | grep 'dn: GlueCEUniqueID' | wc -l
    # The Django way is slower:
    #lcg_ces_deployed = len(gluece.objects.filter(implementationname = 'LCG-CE'))
    cursor.execute("SELECT COUNT(*) FROM glue_gluece ce WHERE ce.implementationname='LCG-CE';")
    lcg_ces_deployed = int(cursor.fetchall()[0][0])
    
    # 7. Number of CEs and CREAM-CEs supporting MPI
    # Extracted from SAM API
    # http://lcg-sam.cern.ch:8080/reports/lcg_deployment_C5.xsql
    ces_mpi = doc.xpathEval("/LCG_DEPLOYMENT/LCG_CEs_and_CREAM_CEs_SUPPORTING_MPI/VALUE/TOTAL_CES")[0].content

    # 8. Installed Capacity per OS
    # Extracted from GStat 2.0.
    # Check with: ldapsearch -LLL -x -h lcg-bdii -p 2170 -b o=grid '(&(objectClass=GlueSubCluster)(GlueHostOperatingSystemName=*AIX*))'
    temp = {}
    cursor.execute("SELECT operatingsystemname, operatingsystemrelease, logicalcpus, benchmarksi00 FROM glue_gluesubcluster;")
    normalOS = ['AIX', 'Debian', 'Ubuntu', 'SUSE LINUX']
    rhelOS = ['CentOS', 'ScientificCERNSLC', 'ScientificSL', 
              'RedHatEnterpriseAS', 'RedHatEnterpriseWS', 'ScientificFermiLTS', 
              'ScientificSLF', 'Scientific Linux', 'Scientific Linux CERN SLC',
              'Scientific Linux Fermi LTS', 'ScientificLinuxCern', 
              'ScientificSLE', 'RedHatEnterprise',
              'Red Hat Enterprise Linux Server', 'RedHatEnterpriseClient',
              'RedHatEnterpriseServer']

    for row in cursor.fetchall():
        key = ''
        os = row[0]
        ver = row[1]
        if ver.find('.') != -1:
            ver = ver[0:ver.find('.')]
        logicalcpus = int(row[2])
        si2000 = logicalcpus * int(row[3])

        if os in normalOS:
            key = os+' '+ver
        elif os in rhelOS and ver != '':
            key = 'RHEL ' + ver + ' Compat'

        if key != '':
            if temp.has_key(key):
                tempkey = temp[key]
                tempkey[0] += 1
                tempkey[1] += logicalcpus
                tempkey[2] += si2000
            else:
                temp[key] = [1, logicalcpus, si2000]

    ic_per_os = []
    for key, value in temp.items():
        temp = [key]
        temp.extend(value)
        ic_per_os.append(temp)
    ic_per_os.sort(lambda x, y: cmp(x[0],y[0]))


    return {'date': datetime.utcnow().strftime("%Y-%m-%d %H:%MZ"),
            'total_number_sites': total_number_sites,
            'sites_ok': sites_ok,
            'sites_degraded': sites_degraded,
            'sites_down': sites_down,
            'sites_maint': sites_maint,
            'sites_na': sites_na,
            'sites_glite32': sites_glite32,
            'sites_glite31': sites_glite31,
            'jobs_this_month': jobs_this_month,
            'jobs_this_month_monthName': jobs_this_month_monthName,
            'jobs_this_month_monthNumber': jobs_this_month_monthNumber,
            'jobs_this_month_yearNumber': jobs_this_month_yearNumber,
            'jobs_last_month': jobs_last_month,
            'jobs_last_month_monthName': jobs_last_month_monthName,
            'jobs_last_month_monthNumber': jobs_last_month_monthNumber,
            'jobs_last_month_yearNumber': jobs_last_month_yearNumber,
            'sites_cream_ces': sites_cream_ces,
            'cream_ces_deployed': cream_ces_deployed,
            'lcg_ces_deployed': lcg_ces_deployed,
            'ces_mpi': ces_mpi,
            'ic_per_os': ic_per_os}