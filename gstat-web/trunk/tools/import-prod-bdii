#!/usr/bin/python

import os
import re;
import sys;
import urllib2
import xml.dom.minidom
import logging
import time
from datetime import datetime

DIR = os.path.dirname(__file__)
APPS_DIR = os.path.join(DIR, '..','apps')
sys.path.append(APPS_DIR)
os.environ['DJANGO_SETTINGS_MODULE']='core.settings'

from topology.models import Entity
from topology.models import Entityrelationship

# Set the time to start
start_time=datetime.utcnow()

# Set logging
log = logging.getLogger(sys.argv[0])
hdlr = logging.StreamHandler(sys.stderr)
formatter = logging.Formatter('[%(levelname)s]: %(message)s')
hdlr.setFormatter(formatter)
log.addHandler(hdlr)
log.setLevel(2)

# Welcome
log.info('Welcome to the import-prod-bdii script')
log.info('Processing started ...')

sites = {}
objects = Entity.objects.filter(type='Site')
for object in objects:
    sites[object.uniqueid] = object

# Get a list of site BDIIs
try:
    url="http://lcg-bdii-conf.cern.ch/bdii-conf/bdii.conf"
    response = urllib2.urlopen(url).readlines()
except Exception, e:
    sys.stderr.write("Error: %s\n%s\n" % (url,e))


for line in response:
    if (re.search("ldap",line)):
        sitename=re.sub("ldap.*","",line).strip()
        hostname=re.sub(".*ldap://","",line)
        hostname=re.sub(":.*","",hostname).strip()
        value = re.sub(".*ldap://","ldap://",line).strip()
        (service_obj, created) = Entity.objects.get_or_create(uniqueid=value, type='bdii_site', hostname=hostname)
        if created:
            service_obj.save()
            if ( not sites.has_key(sitename) ):
                (site_obj, created) = Entity.objects.get_or_create(uniqueid=sitename, type='Site', hostname=None)
                if created:
                    site_obj.save()
                sites[sitename] = site_obj
            (s, created) = Entityrelationship.objects.get_or_create(subject=service_obj, object=sites[sitename], predicate="SiteService")
        if created:
            s.save()

SAM_URL="http://lcg-sam.cern.ch:8080/same-pi/"

hostname_list = {}
hostname_mapping = {}

# Get a list of top-level BDIIs from SAM DB
for site in sites:
    # Get XML from SAM
    try:
        #url=SAM_URL + "/servicemetrics_status_details.jsp?VO_name=OPS&ServiceMetric=CE-sft-lcg-rm-gfal&Site_name=" + site
        url=SAM_URL + "servicemetrics_status_details.jsp?VO_name=OPS&ServiceMetric=CE-org.sam.WN-RepISenv&Site_name=" + site
        
        response = urllib2.urlopen(url).read()
    except Exception, e:
        sys.stderr.write("Error: %s\n%s\n" % (url,e))
        continue
    # Process XMLls.jsp?VO_name=OPS&ServiceMetric=CE-sft-lcg-rm-gfal&Site_name=
    doc = xml.dom.minidom.parseString(response)
    for service in doc.getElementsByTagName("Service"):
        ce=service.getAttribute("endpoint")
        for measurement in service.getElementsByTagName("measurement"):
            summary=measurement.getElementsByTagName("summary")
            for node1 in summary:
                for node2 in node1.childNodes:
                    if node2.nodeType == node2.TEXT_NODE:
                        data=node2.data
                        infosys=data.split("LCG_GFAL_INFOSYS is set to")[1]
                        hosts=infosys.split(',')
                        for host in hosts:
                            hostname=host.split(":")[0]
                            hostname=hostname.strip()
                            log.info('site=%s, top_bdii=%s' % (site, hostname))
                            try:
                                hostname_list[hostname].append(ce)
                                hostname_mapping[hostname].append(site)
                            except KeyError:
                                hostname_list[hostname] = [ce]
                                hostname_mapping[hostname]= [site]


for hostname in hostname_list.keys():
    # save top-level bdii
    value = "ldap://%s:2170/Mds-Vo-name=local,o=grid" %(hostname)
    (service_obj, created) = Entity.objects.get_or_create(uniqueid=value, type='bdii_top', hostname=hostname)
    if created:
        service_obj.save()
    # save site
    sitenames = hostname_mapping[hostname]
    for sitename in sitenames:
        if ( not sites.has_key(sitename) ):
            (site_obj, created) = Entity.objects.get_or_create(uniqueid=sitename, type='Site', hostname=None)
            if created:
                site_obj.save()
            sites[sitename] = site_obj
        (s, created) = Entityrelationship.objects.get_or_create(subject=sites[sitename], object=service_obj, predicate="SiteService")
        if created:
            s.save()

# Get time taken for importing production BDIIs
log.info("Time taken: %s" % str(datetime.utcnow() - start_time))


