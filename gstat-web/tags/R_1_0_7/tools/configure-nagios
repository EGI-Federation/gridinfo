#!/usr/bin/python
##############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2004.
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at #
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS
# OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
#
# NAME :        configure_nagios
#
# DESCRIPTION : This script ...
#
# AUTHORS :     Laurence.Field@cern.ch
#
# NOTES :
#
##############################################################################
import os
import sys
import glob
import getopt
import logging
import socket 

DIR = os.path.dirname(__file__)
APPS_DIR = os.path.join(DIR, '..','apps')
sys.path.append(APPS_DIR)
os.environ['DJANGO_SETTINGS_MODULE']='core.settings'

from topology.models import Entity, Entityrelationship
    
# Prints out the usage.
def usage():
    sys.stderr.write('Usage: %s [OPTIONS]\n' % (sys.argv[0]))
    sys.stderr.write('''

Options:
-d --debug     Debug level 0-3, default 0
-n --nagios    Top-level Nagios configuration directory. default: /etc/nagios.
''')
    
# Parse input parameters using getopt and assign to config hash
config={ 'debug': 0,  'nagios': "/etc/nagios" }

try:
    opts, args = getopt.getopt(sys.argv[1:], "n:d:", ["host=","type","nagios", "debug"])
except getopt.GetoptError:
    sys.stderr.write("Error: Invalid option specified.\n")
    usage()
    sys.exit(2)
for o, a in opts:
    if o in ("-n", "--nagios"):
        config['nagios'] = a
    if o in ("-d", "--debug"):
        config['debug'] = a

# Check debug level
config['debug'] = int(config['debug'])
if (config['debug'] > 3):
    sys.stderr.write("Error: Invalid logging level.\n")
    usage()
    sys.exit(1)
config['debug'] = ( 4 - int(config['debug'])) * 10

# Set logging
log = logging.getLogger(sys.argv[0])
hdlr = logging.StreamHandler(sys.stderr)
formatter = logging.Formatter('[%(levelname)s]: %(message)s')
hdlr.setFormatter(formatter)
log.addHandler(hdlr)
log.setLevel(config['debug'])

def get_hostname(hostname):
    index=hostname.rfind(":")
    if (index > -1):
        hostname=hostname[:index]
    index=hostname.rfind("/")
    if (index > -1):        
        hostname=hostname[index+1:]
    return hostname

hosts=[]
qs = Entity.objects.filter(type='bdii_top')
top_bdii = {}
for object in qs:
    hostname=get_hostname(object.uniqueid)
    top_bdii[hostname] = "mds-vo-name=local,o=grid"
    hosts.append(hostname)
qs = Entity.objects.filter(type='bdii_site')
site_bdii = {}
for object in qs:
    hostname=get_hostname(object.uniqueid)
    index =  object.uniqueid.rfind(":")
    bind = object.uniqueid[index+6:].strip()
    site_bdii[hostname] = bind
    try:
        hosts.index(hostname)
    except ValueError, e:
        hosts.append(hostname)

if os.path.exists("%s/gstat/hosts" %(config['nagios'])):
    old_files = glob.glob("%s/gstat/hosts/*.cfg" %(config['nagios']))
    for file in old_files:
        os.remove(file)
else:
    os.makedirs("%s/gstat/hosts" %(config['nagios']))

new_hosts = []

for host in hosts:
    outfile=open("%s/gstat/hosts/%s.cfg" %(config['nagios'], host), 'w')

    outfile.write('''
define host{
    use                     linux-server
    host_name               %s
}
''' %(host))

    if ( top_bdii.has_key(host) ):

        bind = top_bdii[host]
        
        outfile.write('''
define service{
    use                     info-service
    service_description     check-bdii-sites
    check_command           check-bdii-sites!%s!%s!200:100!10:1
    host_name               %s
}

''' % (host,bind,host))

        outfile.write('''
define service{
    use                     info-service
    service_description     check-bdii-freshness
    check_command           check-bdii-freshness!%s!%s!600:1!1000:1
    host_name               %s
}
            
''' % (host,bind,host))
            

    if ( site_bdii.has_key(host) ):
        bind = site_bdii[host]

        outfile.write('''
define service{
    use                     info-service 
    service_description     check-bdii-services
    check_command           check-bdii-services!%s!%s!2:1!10:1
    host_name               %s
}

''' % (host,bind,host))

        outfile.write('''
define service{
    use                     info-service 
    service_description     check-bdii-freshness
    check_command           check-bdii-freshness!%s!%s!600:1!1000:1
    host_name               %s
}

''' % (host,bind,host))

                
        outfile.write('''
define service{
    use                     info-service
    service_description     check-sanity
    check_command           check-sanity!%s!%s
    host_name               %s
}
''' % (host,bind,host))

        outfile.write('''
define service{
    use                     info-service
    service_description     check-ce
    check_command           check-ce!%s!%s
    host_name               %s
}
''' % (host,bind,host))
            
        outfile.write('''
define service{
    use                     info-service
    service_description     check-se
    check_command           check-se!%s!%s
    host_name               %s
}
''' % (host,bind,host))

        outfile.write('''
define service{
    use                     info-service
    service_description     check-site
    check_command           check-site!%s!%s
    host_name               %s
}
''' % (host,bind,host))

        outfile.write('''
define service{
    use                     info-service
    service_description     check-service
    check_command           check-service!%s!%s
    host_name               %s
}
''' % (host,bind,host))
                                                

    outfile.close()
